{
  "Can you tell me the open status for the London Stock Exchange today?": "import requests\nimport json\n\nregion = \"United Kingdom\"\nurl = 'https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=' + \"af8fb19b\"\nr = requests.get(url)\ndata = json.loads(r.text)\nfound = False\nfor item in data['markets']:\n    if item['region'] == region:\n        print(item['current_status'])\n        found = True\n        break\nif not found:\n    print(f'{region} status not found')",
  "What is the expected humidity level in Dubai, United Arab Emirates in the coming week?": "import requests\nBASE_URL = \"http://api.weatherapi.com/v1/forecast.json\"\ncity = 'Dubai'\nresponse = requests.get(BASE_URL, params={'key': 'b4d5490d', 'q': 'city', 'days': 7})\ndata = response.json()\n\nprint(f\"\\nWeather forecast for {city} for the coming week:\\n\")\nfor forecast in data['forecast']['forecastday']:\n    date = forecast['date']\n    avg_humidity = forecast['day']['avghumidity']\n    print(f\"Date: {date}, Expected avg. humidity: {avg_humidity}%\")",
  "What is the address of the nearest pharmacy in San Diego, California?": "import requests\nimport json\n\n# Google Places API Key\nAPI_KEY = '181dbb37'\n\n# Parameters for the API request\nparameters = {\n    'location': '32.715738,-117.161084', # coordinates of San Diego\n    'radius': '50000',  # search within a 50,000 meter radius\n    'type': 'pharmacy', # looking for pharmacies\n    'key': API_KEY,\n}\n\n# Sending GET request to the Places API\nresponse = requests.get('https://maps.googleapis.com/maps/api/place/nearbysearch/json', params=parameters)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Loading the response data into a dict variable\n    data = json.loads(response.text)\n\n    # Get the first pharmacy in the list\n    pharmacy = data['results'][0]\n\n    # Get the name and the address of the pharmacy\n    name = pharmacy['name']\n    address = pharmacy['vicinity']\n\n    print(f'The nearest pharmacy in San Diego, California, is {name} and its address is {address}.')\n\nelse:\n    print('Failed to get data from Google Places API')",
  "Please give me the trading volume of Amazon for the past week.": "import requests\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"\n\nparams = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": \"AMZN\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=params)\ndata = response.json()\n\n# Function to get the trading volume for a given date\ndef get_trading_volume(date, data):\n    if date in data['Time Series (Daily)']:\n        return data['Time Series (Daily)'][date]['5. volume']\n    else:\n        return None\n\n# Get the trading volume for the past week\nimport datetime\n\ntoday = datetime.date.today()\nstart_date = today - datetime.timedelta(days=7)\n\nvolume_data = {}\n\nfor i in range(7):\n    date = start_date + datetime.timedelta(days=i)\n    volume = get_trading_volume(str(date), data)\n    volume_data[str(date)] = volume\n\n# Output the trading volume for each date\nfor date, volume in volume_data.items():\n    if volume is not None:\n        print(f\"The trading volume of Amazon on {date} was {volume}\")\n    else:\n        print(f\"Data not available for {date}\")",
  "Can you suggest some good pubs in London?": "import requests\n\n# API key for Google Places\napi_key = '181dbb37'\n\n# Our search term\nsearch_term = \"pubs in London\"\n\n# The base URL for Google Places search API\nbase_url = \"https://maps.googleapis.com/maps/api/place/textsearch/json?\"\n\n# The complete search URL\nsearch_url = f\"{base_url}query={search_term}&key={api_key}\"\n\n# Send a GET request to the API\nresponse = requests.get(search_url)\n\n# Parse the JSON response into a Python Dictionary\npubs = response.json()\n\n# Filter and sort the pubs by rating\nhigh_rated_pubs = [pub for pub in pubs['results'] if pub.get('rating', 0) >= 4]\nhigh_rated_pubs.sort(key=lambda x: x['rating'], reverse=True)\n\n# Check if there are any high rated pubs\nif high_rated_pubs:\n    # Print the names and ratings of the top 5 high rated pubs\n    for pub in high_rated_pubs[:5]:\n        print(f\"Pub: {pub['name']}, Rating: {pub.get('rating')}\")\nelse:\n    print(\"No pub found with a rating of 4 or more.\")",
  "Can you recommend a hotel in New York City that has a swimming pool?": "import requests\n\ndef find_hotel():\n    # API key\n    API_KEY = '181dbb37'  # provided google places API Key\n    LOCATION = 'New York City'\n    KEYWORD = 'Hotel Swimming Pool'  # you are looking for hotels with swimming pools\n    \n    url = \"https://maps.googleapis.com/maps/api/place/textsearch/json?\"\n\n    query = f'{KEYWORD} in {LOCATION}'\n\n    r = requests.get(url + 'query=' + query +'&key=' + API_KEY)\n    x = r.json()\n\n    data = x['results']\n\n    # store the hotel info\n    hotels = []\n\n    for i in range(len(data)):\n        details = {}\n        details['name'] = data[i]['name']\n        details['address'] = data[i]['formatted_address']\n        details['rating'] = data[i]['rating']\n        hotels.append(details)\n    \n    return hotels\n\nhotels = find_hotel()    #execute the function\nfor hotel in hotels:     #print hotel details\n    print(f\"Name: {hotel['name']}\")\n    print(f\"Address: {hotel['address']}\")\n    print(f\"Rating: {hotel['rating']}\\n\")",
  "I am interested in knowing the high and low prices of Amazon's stock for the month of June 2021.": "import requests\n\nAPI_KEY = \"af8fb19b\"\nsymbol = \"AMZN\"\n\nurl = f\"https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol={symbol}&apikey={API_KEY}\"\nresponse = requests.get(url)\ndata = response.json()\n\n# Get the months in the time series data\nmonthly_data = data[\"Monthly Time Series\"]\n\n# Extract the high and low prices for each month in June 2021\nfor date in monthly_data:\n    year, month, _ = date.split(\"-\")  # Change this line to handle the date format correctly\n    if year == \"2021\" and month == \"06\":\n        high_price = monthly_data[date][\"2. high\"]\n        low_price = monthly_data[date][\"3. low\"]\n        print(f\"The high price of Amazon's stock in June 2021 was {high_price}\")\n        print(f\"The low price of Amazon's stock in June 2021 was {low_price}\")\n        break",
  "I'm planning a beach day in Miami, Florida. Will it be a sunny day or should I prepare for rain?": "import requests\nimport json\n\n\n# Define API url\nurl = \"http://api.weatherapi.com/v1/forecast.json\"\n\n# Define API parameters\nparams = {\n    'key': 'b4d5490d',  # weatherapi api key\n    'q': 'Miami, FL',  # location\n    'days': 1  # forecast for today\n}\n\n# Send GET request to the API\nresponse = requests.get(url, params=params)\n\n# Parse the JSON response\ndata = json.loads(response.text)\n\n# Print the weather forecast\nfor forecast in data['forecast']['forecastday']:\n    print('Date:', forecast['date'])\n    print('Max temp:', forecast['day']['maxtemp_f'], 'F')\n    print('Min temp:', forecast['day']['mintemp_f'], 'F')\n    print('Average humidity:', forecast['day']['avghumidity'], '%')\n    print('Condition:', forecast['day']['condition']['text'])\n    print('---------')\n",
  "Could you give me the location of a pet store in San Diego that offers grooming services?": "import requests\nimport json\n\ndef find_pet_store(city):\n    api_key = \"181dbb37\"\n\n    # base url for place search\n    base_url = \"https://maps.googleapis.com/maps/api/place/textsearch/json?\"\n\n    # define the search query\n    query = f\"pet store grooming services in {city}\"\n\n    # prepare the complete URL\n    final_url = base_url + \"query=\" + query + \"&key=\" + api_key\n\n    # make a request\n    response = requests.get(final_url)\n\n    # convert the response to JSON format\n    data = response.json()\n\n    # if results exist, return the name and address of the first result\n    if len(data['results']) > 0:\n        return data['results'][0]['name'] + \", \" +data['results'][0]['formatted_address']\n    else:\n        return f\"No pet store offering grooming services found in {city}\"\n\nprint(find_pet_store(\"San Diego, California\"))",
  "I'm looking for a gym in Toronto that offers a free trial, can you help me find one?": "import requests\nimport json\n\n# Google Places API URL\nurl = \"https://maps.googleapis.com/maps/api/place/textsearch/json?\"\n\n# The text string on which to search\nquery = \"free trial gym in Toronto\"\n\n# get method of requests module, return response object\nr = requests.get(url + 'query=' + query + '&key=' + '181dbb37')\n\n# json method of response object \nx = r.json()\n\n# store the value of \"results\" key in variable y\ny = x['results']\n\n# keep the first result\ngym_name = y[0]['name']\ngym_address = y[0]['formatted_address']\n\nprint(f\"The gym named {gym_name} is located at {gym_address}\")",
  "Can you provide me with a list of Italian restaurants in San Francisco that have outdoor seating?": "# filename: italian_restaurants_outdoor_seating.py\nimport requests\n\ndef find_italian_restaurants_outdoor_seating(city, feature):\n    # using the google places API key\n    api_key = \"181dbb37\"\n  \n    # base URL for place search\n    base_url = \"https://maps.googleapis.com/maps/api/place/textsearch/json?\"\n  \n    query = f\"{feature} restaurants with outdoor seating in {city}\"\n\n    # prepare the complete URL\n    final_url = base_url + \"query=\" + query + \"&key=\" + api_key\n\n    # make a GET request\n    response = requests.get(final_url)\n  \n    # convert the response to JSON format\n    data = response.json()\n\n    # if results exist, return the name and address of the first few results\n    results = []\n    if len(data['results']) > 0:\n        for idx, result in enumerate(data['results']):\n            if idx == 5: # only return top 5 results\n                break\n            results.append((result['name'], result['formatted_address']))\n        return results\n    else:\n        return f\"No {feature} restaurants found in {city}\"\n\nresults = find_italian_restaurants_outdoor_seating(\"San Francisco\", \"Italian\")\nprint(\"Recommended Italian restaurants with outdoor seating in San Francisco:\")\nfor idx, (name, address) in enumerate(results):\n    print(f\"{idx+1}. {name}, Address: {address}\")",
  "Please tell me the current close status of the London Stock Exchange.": "import requests\nimport json\n\nregion = \"United Kingdom\"\nurl = 'https://www.alphavantage.co/query?function=MARKET_STATUS&apikey=' + \"af8fb19b\"\nr = requests.get(url)\ndata = json.loads(r.text)\nfound = False\nfor item in data['markets']:\n    if item['region'] == region:\n        print(item['current_status'])\n        found = True\n        break\nif not found:\n    print(f'{region} status not found')",
  "Can you provide a list of wedding venues in Sydney that offer outdoor ceremonies?": "import requests\nimport json\n\nAPI_KEY = '181dbb37'\ninput_value = \"wedding venues in Sydney for outdoor ceremonies\"\n\n# Define the Params\nparams = {\n    'query': input_value,\n    'key': API_KEY\n}\n\n# Make the request\nresponse = requests.post('https://maps.googleapis.com/maps/api/place/textsearch/json', params=params)\ndata = response.json()\n\n# Get & print the list of venues\ntry:\n    venues = data['results']\n    if venues:\n        print(\"List of wedding venues in Sydney that offer outdoor ceremonies:\")\n        for venue in venues:\n            name = venue['name']\n            address = venue['formatted_address']\n            print('- Venue:', name)\n            print('  Address:', address)\n            print('---')\n    else:\n        print(\"No wedding venues found in Sydney that offer outdoor ceremonies.\")\n    \nexcept IndexError:\n    print(\"No wedding venues found in Sydney that offer outdoor ceremonies.\")",
  "Is it a good day for surfing in Honolulu today?": "import requests\nimport json\n\n# WeatherAPI key\nweather_api_key = 'b4d5490d'\n\ndef get_conditions(city_name):\n    base_url = f\"http://api.weatherapi.com/v1/current.json?key={weather_api_key}&q={city_name}\"\n    response = requests.get(base_url)\n    data = response.json()\n\n    # Get current weather condition\n    temperature = data['current']['temp_c']\n    wind_speed = data['current']['wind_kph']\n    humidity = data['current']['humidity']\n\n    return temperature, wind_speed, humidity\n\ndef is_gentle_wind(wind_speed):\n    # Based on Beaufort scale, gentle breeze is between 12-19 kph\n    return 12 <= wind_speed <= 19\n\ntemperature, wind_speed, humidity = get_conditions('Honolulu')\ncondition = f\"Temperature is {temperature}°C with wind speed of {wind_speed} KPH. Humidity is at {humidity} percent.\"\n\nif is_gentle_wind(wind_speed):\n    condition += \" Wind is gentle enough for surfing. Please ensure to look at wave conditions from local sources.\"\n\nprint(condition)",
  "Can you provide me with the sunset and sunrise times for Paris this upcoming Wednesday?": "import datetime\nimport requests\n\ndef get_sunrise_sunset(city):\n    api_key = 'b4d5490d'\n    base_url = \"http://api.weatherapi.com/v1/forecast.json?key={}&q={}&days=7\".format(api_key, city)\n    response = requests.get(base_url)\n    data = response.json()\n    forecast_data = data['forecast']['forecastday']\n\n    # What day is it today?\n    today = datetime.date.today()\n    this_upcoming_wednesday = today + datetime.timedelta( (2-today.weekday() + 7) % 7 )\n\n    for day in forecast_data:\n        date = day['date']\n        # Format the date from string to datetime object to compare\n        date_obj = datetime.datetime.strptime(date, '%Y-%m-%d').date()\n\n        if date_obj == this_upcoming_wednesday:\n            sunrise = day['astro']['sunrise']\n            sunset = day['astro']['sunset']\n            print(\"Date: {}, Sunrise: {}, Sunset: {}\".format(date, sunrise, sunset))\n            break\n    else:\n        print(\"Forecast for the upcoming Wednesday is not available.\")\n\nget_sunrise_sunset(\"Paris, France\")",
  "What was the closing price of Tesla's stock on the last trading day of 2021?": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"  # Alphavantage API key\nsymbol = \"TSLA\"  # Tesla stock symbol\n\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",  # Use 'full' to get more historical data\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nstock_data = response.json()\n\n# Define the target date as the last trading day of 2021\ntarget_date = '2021-12-31'\nif target_date in stock_data['Time Series (Daily)']:\n    date_data = stock_data['Time Series (Daily)'][target_date]\n    print(f'For {target_date}, Tesla (symbol: {symbol}) stock closed at: {date_data[\"4. close\"]}')\nelse:\n    print(f'There is no data for {symbol} on {target_date}.')",
  "What are the best art galleries to visit in London, UK?": "import requests\nimport json\n\ndef find_best_art_galleries_in_london():\n    API_KEY = '181dbb37'  # Google Places API key\n    LOCATION = '51.5074,-0.1278'  # GPS coordinates of London, UK\n    TYPE = 'art_gallery'  # Google Places type for art galleries\n \n    # URL to send the request to\n    url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?\"\n \n    # Radius of 10,000 meters (around 6.2 miles) - fairly central London\n    radius = 10000\n\n    # Make the GET request to Google Places API\n    response = requests.get(url + 'location=' + LOCATION + '&radius=' + str(radius) + '&type=' + TYPE + '&key=' + API_KEY)\n    data = response.json()\n\n    # Store the value of 'results' in the data variable\n    data = data['results']\n\n    # Filter out galleries without user ratings\n    rated_galleries = [result for result in data if 'user_ratings_total' in result and result['user_ratings_total'] > 0]\n\n    # Sort by rating in descending order\n    sorted_galleries = sorted(rated_galleries, key=lambda x: x['rating'], reverse=True)\n\n    # Print gallery names and ratings\n    for gallery in sorted_galleries:\n        name = gallery['name']\n        rating = gallery['rating']\n        print(f\"Gallery: {name}\")\n        print(f\"Rating: {rating}\\n\")\n\n# find and print the best art galleries in London\nfind_best_art_galleries_in_london()",
  "Can you provide me with the forecast for San Francisco for the next week, including the expected precipitation and wind speed on each day?": "import requests\nimport json\n\n# Define API url\nurl = \"http://api.weatherapi.com/v1/forecast.json\"\n\n# Define API parameters\nparams = {\n    'key': 'b4d5490d',  # weatherapi api key\n    'q': 'San Francisco',  # location\n    'days': 7,  # number of days for forecast (max 10 days)\n}\n\n# Send GET request to the API\nresponse = requests.get(url, params=params)\n\n# Parse the JSON response\ndata = json.loads(response.text)\n\n# Print the forecast\nprint('Forecast for San Francisco for the next week:\\n')\nfor day in data['forecast']['forecastday']:\n    print('Day:', day['date'])\n    print('Expected precipitation:', day['day']['totalprecip_mm'], 'mm')\n    print('Expected wind speed:', day['day']['avgvis_km'], 'km/h')\n    print()",
  "What was the closing price of Microsoft on July 1, 2019?": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"\n\nparams = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": \"MSFT\",\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=params)\ndata = response.json()\n\ndaily_data = data['Time Series (Daily)']\ndates = list(daily_data.keys())\nclosing_price = None\n\n# Find the closing price for July 1, 2019\nfor date in dates:\n    if date.startswith(\"2019-07-01\"):\n        closing_price = daily_data[date]['4. close']\n        break\n\nif closing_price:\n    print(f\"The closing price of Microsoft on July 1, 2019 was {closing_price}\")\nelse:\n    print(\"Data not available for July 1, 2019.\")",
  "Is there a park near the Metropolitan Museum of Art in New York City?": "import requests\nimport json\n\nAPI_KEY = '181dbb37'\n\ndef get_nearest_place(lat, lng, keyword):\n    endpoint_url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\"\n    params = {\n        'key': API_KEY,\n        'location': '{},{}'.format(lat, lng),\n        'radius': 2000,  # within 2 kilometers\n        'keyword': keyword\n    }\n\n    res = requests.get(endpoint_url, params=params)\n    result = json.loads(res.content)\n\n    if 'results' in result and len(result['results']) > 0:\n        return result['results'][0]\n    else:\n        return None\n\nmet_museum_lat = 40.7794\nmet_museum_lng = -73.9632\nkeyword = \"park\"\nnearest_park = get_nearest_place(met_museum_lat, met_museum_lng, keyword)\n\nif nearest_park:\n    print(\"The nearest park to the Metropolitan Museum of Art is\", nearest_park['name'])\nelse:\n    print(\"No park found within 2 kilometers of the Metropolitan Museum of Art.\")",
  "Is it safe to go hiking in the mountains near Denver, Colorado, today, given the current weather condition and visibility?": "import requests\n\ndef get_current_weather(city='Denver, Colorado', api_key='b4d5490d'):\n    # Define the base URL for the API\n    BASE_URL = \"http://api.weatherapi.com/v1/current.json\"\n\n    # Make the API request\n    response = requests.get(BASE_URL, params={'key': api_key, 'q': city})\n    data = response.json()\n\n    # Get current weather condition, temperature and visibility\n    condition = data['current']['condition']['text']\n    temperature = data['current']['temp_f']\n    visibility = data['current']['vis_miles']\n\n    # Check safety criteria\n    safe_for_hike = None\n    if temperature > 60 and visibility > 6:\n        safe_for_hike = True\n    else:\n        safe_for_hike = False\n\n    print('Current condition :', condition)\n    print('Current temperature :', temperature, '°F')\n    print('Current visibility :', visibility, 'miles')\n    print('Is it safe for hiking? :', 'Yes' if safe_for_hike else 'No')\n\nget_current_weather()",
  "Please look up the close price of Google's stock on February 28, 2020.": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"  # Alphavantage API key\nsymbol = \"GOOGL\"  # Alphabet Inc.'s stock symbol\n\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nstock_data = response.json()\n\n# Extract the close price for February 28, 2020\nclose_price = stock_data[\"Time Series (Daily)\"][\"2020-02-28\"][\"4. close\"]\n\nprint(f\"The closing price of Google's stock on February 28, 2020, was: {close_price}\")",
  "Give me the trading volume for Amazon on Black Friday in 2020.": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"  # Alphavantage API key\nsymbol = \"AMZN\"  # Amazon's stock symbol\n\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nstock_data = response.json()\n\n# Extract the volume for Black Friday (2020-11-27)\ntrading_volume = stock_data[\"Time Series (Daily)\"][\"2020-11-27\"][\"5. volume\"]\n\nprint(f\"The trading volume of Amazon's stock on Black Friday, 2020, was: {trading_volume}\")",
  "Can you tell me the current open status for the US stock market on May 15, 2022?": "import datetime\n\n# Specify the date\ndate = datetime.date(2022, 5, 15)\n\n# Check if the date falls on a weekend\nif date.weekday() > 4:  # weekday() function returns the day of the week as an integer (Monday is 0, Sunday is 6)\n    print(\"The US stock market was closed on May 15, 2022 because it was a weekend.\")\nelse:\n    # List of public holidays in 2022\n    holidays = [\n        datetime.date(2022, 1, 1),  # New Year's Day\n        datetime.date(2022, 1, 17),  # Martin Luther King Jr. Day\n        datetime.date(2022, 2, 21),  # Presidents' Day\n        datetime.date(2022, 4, 15),  # Good Friday\n        datetime.date(2022, 5, 30),  # Memorial Day\n        datetime.date(2022, 6, 19),  # Juneteenth National Independence Day\n        datetime.date(2022, 7, 4),   # Independence Day\n        datetime.date(2022, 9, 5),   # Labor Day\n        datetime.date(2022, 11, 24), # Thanksgiving Day\n        datetime.date(2022, 12, 26)  # Christmas\n    ]\n\n    if date in holidays:\n        print(\"The US stock market was closed on May 15, 2022 because it was a major holiday.\")\n    else:\n        print(\"The US stock market was open on May 15, 2022.\")",
  "Could you tell me if there are any severe weather warnings in effect for the state of Illinois?": "import requests\n\ndef get_severe_weather_warnings(api_key, region):\n    # The base URL for the weather API\n    base_url = \"http://api.weatherapi.com/v1/forecast.json?key={}&q={}&days=1&alerts=yes\"\n   \n    # Form the request URL\n    req_url = base_url.format(api_key, region)\n\n    # Send a request to the weather API\n    response = requests.get(req_url)\n\n    # Check if the request was successful\n    if response.status_code != 200:\n        print(\"Error: Unable to retrieve weather data.\")\n        return\n\n    # Load the JSON response\n    data = response.json()\n\n    # Extract the alerts data\n    alerts = data.get('alerts', {}).get('alert', [])\n   \n    if len(alerts) == 0:\n        print(\"There are currently no severe weather warnings in effect for {}.\".format(region))\n    else:\n        for alert in alerts:\n            print(\"\\nAlert:\")\n            print(\"Headline: {}\".format(alert['headline']))\n            print(\"Severity: {}\".format(alert['severity']))\n            print(\"Time: Effective from {} until {}\".format(alert['effective'], alert['expires']))\n            print(\"Areas affected: {}\".format(alert['areas']))\n            print(\"Certainty: {}\".format(alert['certainty']))\n            print(\"Description: {}\".format(alert['desc']))\n            print(\"Instructions: {}\\n\".format(alert['instruction']))\n        \n# Please replace 'Illinois' with your exact location (ex: city name) if you get no result\nget_severe_weather_warnings('b4d5490d', 'Illinois')",
  "How much did Amazon's stock price increase on February 1, 2022?": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"  # Alphavantage API key\nsymbol = \"AMZN\"  # Amazon Inc.'s stock symbol\n\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nstock_data = response.json()\n\n# Get the close price for February 1, 2022 and January 31, 2022\nfeb_1_close_price = float(stock_data['Time Series (Daily)']['2022-02-01'][\"4. close\"])\njan_31_close_price = float(stock_data['Time Series (Daily)']['2022-01-31'][\"4. close\"])\n\n# Calculate the increase price\nincrease_price = feb_1_close_price - jan_31_close_price\n\nprint(f'On February 1, 2022, Amazon (symbol: {symbol}) stock price increased by: {increase_price}')",
  "Provide the highest and lowest prices for Alibaba's stock in the month of May 2020.": "import requests\nAPI_KEY = \"af8fb19b\"\nsymbol = \"BABA\"\nurl = f\"https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY&symbol={symbol}&apikey={API_KEY}\"\nresponse = requests.get(url)\ndata = response.json()\n# Get the months in the time series data\nmonthly_data = data[\"Monthly Time Series\"]\n# Extract the high and low prices for each month in June 2021\nfor date in monthly_data:\n    year, month, _ = date.split(\"-\")  # Change this line to handle the date format correctly\n    if year == \"2020\" and month == \"05\":\n        high_price = monthly_data[date][\"2. high\"]\n        low_price = monthly_data[date][\"3. low\"]\n        print(f\"The high price of Alibaba's stock in May 2020 was {high_price}\")\n        print(f\"The low price of Alibaba's stock in May 2020 was {low_price}\")\n        break",
  "Can you recommend a good seafood restaurant in Boston, Massachusetts?": "import requests\nimport json\n\ndef find_seafood_restaurants(api_key, query):\n    # Define our endpoint\n    url = \"https://maps.googleapis.com/maps/api/place/textsearch/json\"\n\n    # Define our parameters\n    params = {\n        'query': query,\n        'key': api_key\n    }\n    \n    # Send the request and get the response\n    response = requests.request(\"GET\", url, params=params)\n    \n    # Convert the response to JSON\n    data = response.json()\n    \n    # Print the number of results found\n    print(f'Number of results found: {len(data[\"results\"])}')\n\n    # Sort the results by rating\n    sorted_results = sorted(data[\"results\"], key = lambda i: i['rating'], reverse=True)\n\n    # Print the details of top-rated restaurants found\n    for result in sorted_results[:10]: # top 10 results\n        print(f\"\\nName: {result['name']}\")\n        print(f\"Address: {result['formatted_address']}\")\n        print(f\"Rating: {result['rating']}\")\n\napi_key = '181dbb37'\nquery = \"Seafood restaurants in Boston Massachusetts\"\nfind_seafood_restaurants(api_key, query)",
  "Can you help me find a movie theater in London with an IMAX screen, along with its address and website url?": "import requests\n\nSEARCH_URL = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\"\nDETAILS_URL = \"https://maps.googleapis.com/maps/api/place/details/json\"\nAPI_KEY = '181dbb37'  # The Google Places API Key\n\nlocation = \"51.5074,-0.1278\"  # Coordinates for London\nradius = 15000  # in meters\nkeyword = \"IMAX\"  # Specifically looking for IMAX theaters\n\nsearch_params = {\n    \"location\": location,\n    \"radius\": radius,\n    \"keyword\": keyword,\n    \"key\": API_KEY\n}\n\nresponse = requests.get(SEARCH_URL, params=search_params)\ndata = response.json()\n\nresults = data[\"results\"]\n\nif len(results) == 0:\n    print(\"No IMAX theaters found.\")\nelse:\n    for theater in results:\n        details_params = {\n            \"place_id\": theater[\"place_id\"],\n            \"fields\": \"name,formatted_address,website\",\n            \"key\": API_KEY\n        }\n        details_response = requests.get(DETAILS_URL, params=details_params)\n        details_data = details_response.json()\n        details = details_data[\"result\"]\n        \n        print(\"Name:\", details[\"name\"])\n        print(\"Address:\", details[\"formatted_address\"])\n        \n        if \"website\" in details:\n            print(\"Website:\", details[\"website\"])\n        else:\n            print(\"Website not available.\")\n        \n        print(\"\\n---\\n\")",
  "Show me the highest stock price of Amazon on December 24, 2018.": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"  # Alphavantage API key\nsymbol = \"AMZN\"  # Amazon Inc.'s stock symbol\n\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nstock_data = response.json()\n\n# Get the high price for December 24, 2018\ndec_24_high_price = float(stock_data['Time Series (Daily)']['2018-12-24'][\"2. high\"])\n    \nprint(f'The highest stock price of Amazon (symbol: {symbol}) on December 24, 2018 was: {dec_24_high_price}')",
  "What hotels in Las Vegas offer a free shuttle service to the airport?": "import requests\nimport json\n\ndef find_hotels():\n    API_KEY = '181dbb37'  # Google Places API Key\n    LOCATION = 'Las Vegas, Nevada'\n    RADIUS = 50000\n    KEYWORD = 'Hotels with free airport shuttle'\n\n    url = \"https://maps.googleapis.com/maps/api/place/textsearch/json?\"\n\n    # The text string on which to search\n    query = f'{KEYWORD} in {LOCATION}'\n    \n    r = requests.get(url + 'query=' + query +'&key=' + API_KEY)\n    x = r.json()\n\n    # Store the values of 'results' in the data variable\n    data = x['results']\n\n    hotels = []\n\n    # Loop over the results to get details\n    for i in range(len(data)):\n        details = {}\n        details['name'] = data[i]['name']\n        details['address'] = data[i]['formatted_address']\n        if 'rating' in data[i]:\n            details['rating'] = data[i]['rating']\n        else:\n            details['rating'] = 'No rating'\n        hotels.append(details)\n\n    return hotels\n\n# Print details of the hotels\nhotels = find_hotels()\nfor hotel in hotels:\n    print(f\"Name: {hotel['name']}\")\n    print(f\"Address: {hotel['address']}\")\n    print(f\"Rating: {hotel['rating']}\\n\")",
  "Can you recommend some vegan restaurants in Seattle?": "import requests\nimport json\n\ndef find_vegan_restaurants():\n    API_KEY = '181dbb37'  # your google places API Key\n    LOCATION = 'Seattle,Washington'\n    RADIUS = 50000\n    KEYWORD = 'Vegan Restaurant'\n    \n    url = \"https://maps.googleapis.com/maps/api/place/textsearch/json?\"\n\n    # The text string on which to search\n    query = f'{KEYWORD} in {LOCATION}'\n\n    r = requests.get(url + 'query=' + query +'&key=' + API_KEY)\n    x = r.json()\n\n    # store the value of 'results' \n    # in the data variable\n    data = x['results']\n    \n    vegan_restaurants = []\n\n    # loop over the results to get details\n    for i in range(len(data)):\n        details = {}\n        details['name'] = data[i]['name']\n        details['address'] = data[i]['formatted_address']\n        details['rating'] = data[i]['rating']\n        vegan_restaurants.append(details)\n    \n    return vegan_restaurants\n\n# print details of the vegan restaurants\nvegan_restaurants = find_vegan_restaurants()\nfor restaurant in vegan_restaurants:\n    print(f\"Name: {restaurant['name']}\")\n    print(f\"Address: {restaurant['address']}\")\n    print(f\"Rating: {restaurant['rating']}\\n\")",
  "What is the current exchange volume for Microsoft stock this month?": "import requests\nimport json\nfrom datetime import datetime\n\napi_keys = {'google places': '181dbb37', 'weatherapi': 'b4d5490d', 'alphavantage': 'af8fb19b'}\n\ndef get_current_monthly_trading_volume(symbol):\n    # Get the current year and month\n    month = str(datetime.today().month).zfill(2) # zfill to ensure month is two digits, e.g., 04 instead of 4\n    year = datetime.today().year\n\n    url = \"https://www.alphavantage.co/query\"\n    api_key = api_keys['alphavantage']\n\n    querystring = {\n        \"function\": \"TIME_SERIES_MONTHLY\",\n        \"symbol\": symbol,\n        \"apikey\": api_key\n    }\n\n    response = requests.request(\"GET\", url, params=querystring)\n    data = response.json()\n\n    try:\n        monthly_data = data['Monthly Time Series']\n        for date_key in monthly_data.keys():\n            if date_key.startswith(str(year) + '-' + month):\n                return monthly_data[date_key]['5. volume']\n    except KeyError:\n        return \"No data available.\"\n\nprint(get_current_monthly_trading_volume(\"MSFT\"))",
  "How much snowfall is expected in Anchorage, Alaska, next week?": "import requests\nimport datetime\n\n# Get the current date\ncurrent_date = datetime.date.today()\n\n# Define the API key\napi_key = 'b4d5490d'\n\n# Define the location (Anchorage, Alaska)\nlocation = 'Anchorage, Alaska'\n\n# Create a request to the weather API\nurl = f'https://api.weatherapi.com/v1/forecast.json?key={api_key}&q={location}&days=7'\nresponse = requests.get(url)\n\n# Check if the request was successful\nif response.status_code == 200:\n    # Parse the JSON response\n    data = response.json()\n\n    # Get the forecast for the next week\n    forecast = data['forecast']['forecastday']\n\n    # Print the daily snowfall forecast for each day\n    for day in forecast:\n        date = day['date']\n        snowfall_cm = day['day']['totalsnow_cm']\n        print(f\"Expected snowfall on {date} in {location} is {snowfall_cm} cm.\")\nelse:\n    # Print an error message if the request failed\n    print(\"An error occurred while fetching the weather forecast.\")",
  "Can you give me a list of bars in New Orleans that have live music?": "import requests\nimport json\n\nAPIKey = '181dbb37'  # Replace with your Google Places API key\n\n# Specify the location and query parameters\nlocation = \"New Orleans\"\nquery = \"live music bars\"\n\n# Form the request URL\nurl = f\"https://maps.googleapis.com/maps/api/place/textsearch/json?query={query}+in+{location}&key={APIKey}\"\n\n# Make request to the API\nresponse = requests.get(url)\n\n# Convert the response to JSON\ndata = json.loads(response.text)\n\n# Traverse through the data\nfor result in data['results']:\n    name = result['name']\n    address = result['formatted_address']\n    print(f\"Name: {name}, Address: {address}\")",
  "Provide me with the website for the Vatican Museums in Rome.": "import requests\nimport json\n\nAPI_KEY = '181dbb37'\n\n# First, let's use the 'Place Search' API to get a 'place_id' for Vatican Museums\nplace_search_params = {\n    'query': 'Vatican Museums in Rome',\n    'key': API_KEY\n}\nresponse = requests.get('https://maps.googleapis.com/maps/api/place/textsearch/json', params=place_search_params)\nplace_search_data = response.json()\n\n# Check if any museum found\nif 'results' in place_search_data and place_search_data['results']:\n    place_id = place_search_data['results'][0]['place_id']\nelse:\n    print('No museum found for Vatican Museums in Rome')\n    quit()\n\n# Now, let's use the 'Place Details' API to get detailed information\nplace_detail_params = {\n    'place_id': place_id,\n    'fields': 'website', # we only need the 'website' field\n    'key': API_KEY\n}\nresponse = requests.get('https://maps.googleapis.com/maps/api/place/details/json', params=place_detail_params)\nplace_detail_data = response.json()\n\n# Check if there's website information in the response\nif 'result' in place_detail_data and 'website' in place_detail_data['result']:\n    print('Website for Vatican Museums in Rome:', place_detail_data['result']['website'])\nelse:\n    print('No website information found for Vatican Museums in Rome')",
  "What is the chance of thunderstorms in Rio de Janeiro, Brazil, next week and what will be the temperature and humidity during those days?": "import requests\n\napi_key = 'b4d5490d'\ncity = 'Rio de Janeiro, Brazil'\n\n# Get the next week's weather forecast for Rio de Janeiro\nresponse = requests.get(f'https://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city}&days=7')\ndata = response.json()\n\n# Extract the forecast for each day\nforecast = data['forecast']['forecastday']\n\n# Iterate over each day's forecast\nfor day in forecast:\n    date = day['date']\n    chance_of_thunderstorm = day['day']['daily_chance_of_rain']\n    average_temp = day['day']['avgtemp_c']\n    humidity = day['day']['avghumidity']\n    \n    print(f\"On {date}:\")\n    print(f\"Chance of thunderstorms: {chance_of_thunderstorm}%\")\n    print(f\"Temperature: {average_temp} °C\")\n    print(f\"Humidity: {humidity}%\")\n    print()",
  "I am planning a weekend trip to Las Vegas. Can you predict the expected high and low temperature during my trip?": "import datetime\nimport requests\n\n# Define the API key\napi_key = \"b4d5490d\"\n\n# Define the location (Las Vegas)\nlocation = \"Las Vegas, Nevada\"\n\n# Get the coming Saturday and Sunday date in yyyy-MM-dd format\ntoday = datetime.date.today()\nsaturday = today + datetime.timedelta((5-today.weekday()+7)%7)\nsunday = saturday + datetime.timedelta(1)\ntrip_dates = [saturday.strftime(\"%Y-%m-%d\"), sunday.strftime(\"%Y-%m-%d\")]\n\n# Make a request to the weather API for each date\nfor trip_date in trip_dates:\n    url = f\"https://api.weatherapi.com/v1/forecast.json?key={api_key}&q={location}&dt={trip_date}\"\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        # Parse the JSON response\n        data = response.json()\n\n        # Get the day forecast\n        day_forecast = data[\"forecast\"][\"forecastday\"][0][\"day\"]\n\n        # Get the high and low temperature\n        max_temp = day_forecast[\"maxtemp_f\"]\n        min_temp = day_forecast[\"mintemp_f\"]\n\n        # Print the weather information\n        print(f\"On {trip_date}, the expected high is {max_temp}°F and the expected low is {min_temp}°F in {location}.\")\n    else:\n        # Print an error message if the request failed\n        print(f\"An error occurred while fetching the weather forecast for {trip_date}.\")",
  "What is the likelihood of a thunderstorm occurring in Houston, Texas next weekend?": "import requests\nimport datetime\n\n# Define the API key from the provided dictionary\napi_key = 'b4d5490d'\n\n# Define the location\nlocation = 'Houston, Texas'\n\n# Calculate the date for next Saturday\ntoday = datetime.date.today()\nsaturday = today + datetime.timedelta((5-today.weekday()) % 7 + 7)\n\n# Saturday and Sunday are considered as the weekend\nweekend_dates = [saturday, saturday + datetime.timedelta(days=1)]\nweekend_dates_str = [date.strftime('%Y-%m-%d') for date in weekend_dates]\n\n# Initialize thunderstorm_chance\nthunderstorm_chance = []\n\nfor date_str in weekend_dates_str:\n    # Make a request to the weather API\n    url = f'http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={location}&date={date_str}'\n    response = requests.get(url)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        data = response.json()\n\n        # Get forecast for the date\n        forecast = data['forecast']['forecastday']\n        for forecast_day in forecast:\n            if forecast_day['date'] == date_str:\n                thunderstorm_chance.append((date_str, forecast_day['day']['daily_chance_of_rain']))\n                break\n                \nif len(thunderstorm_chance) == 0:\n    # Print an error message if no forecast is found for both days\n    print(\"Unable to find the forecast for the weekend.\")\nelse:\n    # Print the thunderstorm chance for each day of the weekend\n    for date_str, chance in thunderstorm_chance:\n        print(f\"The chance of thunderstorms in {location} on {date_str} is {chance}%.\")",
  "How much was Tesla's stock worth on the day it went public?": "import requests\nimport json\nfrom datetime import datetime, timedelta\n\n# Alphavantage API key\nAPI_KEY = \"af8fb19b\"\n# Tesla stock symbol\nsymbol = \"TSLA\"  \n# Tesla IPO date\nIPO_date = '2010-06-29'\n\n# API endpoint\nAPI_URL = \"https://www.alphavantage.co/query\"\n\n# API parameters\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\n# sending get request and saving the response as response object\nresponse = requests.get(API_URL, params=data)\n\n# extracting data in json format\nstock_data = response.json()\n\n# Finding the stock value of the IPO date\ntry:\n    opening_value = float(stock_data['Time Series (Daily)'][IPO_date]['1. open'])\n    print(f'Tesla\\'s stock was worth ${opening_value} on the day it went public.')\nexcept KeyError:\n    print(f\"No data found for Tesla's stock on {IPO_date}.\")",
  "What was Amazon's stock price at the end of the last trading day of the year 2019?": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"  # Alphavantage API key\nsymbol = \"AMZN\"  # Amazon Inc.'s stock symbol\n\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",  # Getting the 'full' size data to access 2019's data\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nstock_data = response.json()\n\n# Once we have all the data, we can navigate to 2019's data\nend_2019_data = stock_data['Time Series (Daily)'][\"2019-12-31\"]\n\n# Print out the close price at the end of the day on 2019-12-31\nprint(f\"For end of the day on 2019-12-31, Amazon (symbol: {symbol}) stock closed at: {end_2019_data['4. close']}\")",
  "Can you provide me with the maximum wind speed and direction in Chicago next Monday?": "import requests\nimport datetime\n\n# API Key for weatherapi\napi_key = 'b4d5490d'\n\n# Set the city and state for Chicago\ncity = 'Chicago'\nstate = 'Illinois'\n\n# Get next Monday's date\ncurrent_date = datetime.date.today()\nnext_monday = current_date + datetime.timedelta((0 - current_date.weekday() + 7) % 7)\n\n# Create the API URL\nurl = f\"http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city},{state}&dt={next_monday}\"\n\n# Send a GET request to the API\nresponse = requests.get(url)\n\n# Parse the JSON response\ndata = response.json()\n\n# Get the wind conditions for next Monday\nhours = data['forecast']['forecastday'][0]['hour']\nmax_wind_speed = max(hours, key=lambda x: x['wind_kph'])['wind_kph']\nmax_wind_direction = max(hours, key=lambda x: x['wind_kph'])['wind_dir']\n\n# Print the wind conditions\nprint(f\"Max wind speed in Chicago next Monday: {max_wind_speed} kph\")\nprint(f\"Wind direction with max wind speed in Chicago next Monday: {max_wind_direction}\")",
  "How much was the exchange volume of Amazon on October 1, 2021?": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"  # Alphavantage API key\nsymbol = \"AMZN\"  # Amazon Inc.'s stock symbol\n\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nstock_data = response.json()\n\n# Get the exchange volume for October 1, 2021\noct_1_volume = int(stock_data['Time Series (Daily)']['2021-10-01'][\"5. volume\"])\n\nprint(f'On October 1, 2021, Amazon (symbol: {symbol}) stock exchange volume was: {oct_1_volume}')",
  "What is the expected visibility in Beijing, China, at 7 pm this evening?": "import requests\nimport json\n\n\ndef get_visibility_beijing():\n    # Define weatherapi URL\n    url = \"http://api.weatherapi.com/v1/forecast.json\"\n\n    # Define weatherapi parameters\n    params = {\n        'key': 'b4d5490d',  # weatherapi API key\n        'q': 'Beijing',  # location\n        'dt': 'today',  # today's date\n        'hour': '19'  # hour (24-hour format)\n    }\n\n    # Send GET request to the API\n    response = requests.get(url, params=params)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n\n        # Parse the JSON response\n        data = json.loads(response.text)\n\n        # Extract the expected visibility\n        visibility = data['forecast']['forecastday'][0]['hour'][0]['vis_km']\n\n        # Print the visibility\n        print('The expected visibility in Beijing, China at 7 PM today is:')\n        print(visibility, 'kilometers')\n    else:\n        print(\"Error in API call.\")\n\n\nget_visibility_beijing()",
  "What are some popular tourist attractions in Amsterdam?": "import requests\nimport json\n\nAPI_KEY = '181dbb37'\n\ndef get_attractions_near_place(place):\n    geocoding_url = \"https://maps.googleapis.com/maps/api/geocode/json\"\n    params = {\n        'key': API_KEY,\n        'address': place\n    }\n\n    res = requests.get(geocoding_url, params=params)\n    result = json.loads(res.content)\n\n    if 'results' in result and len(result['results']) > 0:\n        location = result['results'][0]['geometry']['location']\n\n        endpoint_url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\"\n        params = {\n            'key': API_KEY,\n            'location': '{},{}'.format(location['lat'], location['lng']),\n            'radius': 50000,  # within 50 kilometers\n            'keyword': 'tourist attractions',\n            'rankby': 'prominence'\n        }\n\n        res = requests.get(endpoint_url, params=params)\n        result = json.loads(res.content)\n\n        if 'results' in result:\n            return result['results']\n        else:\n            return None\n    else:\n        return None\n\nattractions = get_attractions_near_place('Amsterdam')\n\nif attractions:\n    print(\"Found\", len(attractions), \"nearby tourist attractions in Amsterdam.\")\n    for attraction in attractions:\n        print(\"\\nName:\", attraction['name'])\n        if 'rating' in attraction:\n            print(\"Rating:\", attraction['rating'])\n        if 'vicinity' in attraction:\n            print(\"Location:\", attraction['vicinity'])\nelse:\n    print(\"No tourist attractions found within 50 kilometers of Amsterdam.\")",
  "How long will the sun stay up in Anchorage, Alaska, tomorrow?": "import requests\nimport datetime\nfrom dateutil import parser\n\n# Function to calculate difference between sunset and sunrise\ndef calculate_sunlight_duration(sunrise, sunset):\n    # Parse the time from the string\n    sunrise_time = parser.parse(sunrise).time()\n    sunset_time = parser.parse(sunset).time()\n\n    # Subtract the two times to get the duration of sunlight\n    difference = datetime.datetime.combine(datetime.date.today(), sunset_time) - datetime.datetime.combine(datetime.date.today(), sunrise_time)\n\n    return difference\n\ndef get_sunlight_duration(api_key, city):\n    base_url = \"http://api.weatherapi.com/v1/astronomy.json\"\n    \n    # Get tomorrow's date\n    tomorrow = datetime.date.today() + datetime.timedelta(days=1)\n    \n    params = {\n        \"key\": api_key,\n        \"q\": city,\n        \"dt\": tomorrow.strftime('%Y-%m-%d'),  # format the date as 'yyyy-mm-dd'\n    }\n    \n    response = requests.get(base_url, params=params)\n    data = response.json()\n\n    # Get tomorrow's sunrise and sunset times\n    sunrise = data['astronomy']['astro']['sunrise']\n    sunset = data['astronomy']['astro']['sunset']\n\n    # Calculate the duration of sunlight and print it\n    duration = calculate_sunlight_duration(sunrise, sunset)\n    print(f\"Sunlight duration in {city} on {tomorrow.strftime('%Y-%m-%d')} will be: {duration}\")\n\n# Call the function with the API key and city\nget_sunlight_duration(\"b4d5490d\", \"Anchorage\")",
  "Can you give me the wind speed and direction at the current time in New York City?": "import requests\nimport json\n\ndef get_current_weather():\n    # Define API url\n    url = \"http://api.weatherapi.com/v1/current.json\"\n\n    # Define API parameters\n    params = {\n        'key': 'b4d5490d',  # weatherapi api key\n        'q': 'New York City',  # city name\n    }\n\n    # Send GET request to the API\n    response = requests.get(url, params=params)\n\n    # Check if the request was successful\n    if response.status_code != 200:\n        print(\"Error:\", response.status_code)\n        return\n\n    # Parse the JSON response\n    data = json.loads(response.text)\n\n    # Get the current weather conditions\n    current_conditions = data['current']\n\n    # Print the current wind speed and direction\n    wind_speed = current_conditions['wind_mph']\n    wind_direction = current_conditions['wind_dir']\n    print(\"Current wind speed:\", wind_speed, \"mph\")\n    print(\"Current wind direction:\", wind_direction)\n\nget_current_weather()",
  "What will be the weather like in Sydney, Australia next week?": "import requests\nimport json\n\ndef get_weather_forecast():\n    # Define API url\n    url = \"http://api.weatherapi.com/v1/forecast.json\"\n    \n    # Define API parameters\n    params = {\n        'key': 'b4d5490d',  # weatherapi api key\n        'q': 'Sydney, Australia',  # location\n        'days': 7  # forecast for next 7 days\n    }\n    \n    # Send GET request to the API\n    response = requests.get(url, params=params)\n    \n    # Parse the JSON response\n    data = json.loads(response.text)\n    \n    # Print the weather forecast\n    for forecast in data['forecast']['forecastday']:\n        print('Date:', forecast['date'])\n        print('Max temp:', forecast['day']['maxtemp_f'], 'F')\n        print('Min temp:', forecast['day']['mintemp_f'], 'F')\n        print('Average humidity:', forecast['day']['avghumidity'], '%')\n        print('Condition:', forecast['day']['condition']['text'])\n        print('---------')\n\nget_weather_forecast()",
  "What are some popular bars in Barcelona, Spain?": "import requests\nimport json\n\nAPI_KEY = '181dbb37'\n\ndef get_attractions_near_place(place):\n    geocoding_url = \"https://maps.googleapis.com/maps/api/geocode/json\"\n    params = {\n        'key': API_KEY,\n        'address': place\n    }\n\n    res = requests.get(geocoding_url, params=params)\n    result = json.loads(res.content)\n\n    if 'results' in result and len(result['results']) > 0:\n        location = result['results'][0]['geometry']['location']\n\n        endpoint_url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\"\n        params = {\n            'key': API_KEY,\n            'location': '{},{}'.format(location['lat'], location['lng']),\n            'radius': 50000,  # within 50 kilometers\n            'keyword': 'bars',\n            'rankby': 'prominence'\n        }\n\n        res = requests.get(endpoint_url, params=params)\n        result = json.loads(res.content)\n\n        if 'results' in result:\n            return result['results']\n        else:\n            return None\n    else:\n        return None\n\nattractions = get_attractions_near_place('Barcelona, Spain')\n\nif attractions:\n    print(\"Found\", len(attractions), \"nearby bars in Barcelona, Spain.\")\n    for attraction in attractions:\n        print(\"\\nName:\", attraction['name'])\n        if 'rating' in attraction:\n            print(\"Rating:\", attraction['rating'])\n        if 'vicinity' in attraction:\n            print(\"Location:\", attraction['vicinity'])\nelse:\n    print(\"No bars found within 50 kilometers of Barcelona, Spain.\")",
  "What are some popular food trucks in Austin that serve tacos?": "import requests\n\napi_key = '181dbb37'\nendpoint = 'https://maps.googleapis.com/maps/api/place/textsearch/json'\n\nquery = 'popular taco food trucks in Austin'\nparams = {\n    'query': query,\n    'key': api_key\n}\n\nresponse = requests.get(endpoint, params=params)\ndata = response.json()\n\nfor result in data['results']:\n    print(result['name'])",
  "What is the phone number of the nearest 24-hour convenience store to Times Square in New York City?": "import requests\n\ndef find_nearest_convenience_store():\n    API_KEY = '181dbb37'  # Google Places API key\n    LOCATION = '40.7570,-73.9855'  # Latitude and longitude for Times Square, New York City\n    KEYWORD = '24 hour convenience store' \n\n    # URL to send the request to\n    url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?\"\n\n    # radius of 5000 meters (around 3.1 miles)\n    radius = 5000\n    \n    # Make the GET request to Google Places API\n    r = requests.get(url + 'location=' + LOCATION + '&radius=' + str(radius) + '&keyword=' + KEYWORD + '&key=' + API_KEY)\n    x = r.json()\n\n    # Store the value of 'results' in the data variable\n    data = x['results']\n    \n    stores = []\n\n    # Loop over the results to get details\n    for i in range(len(data)):\n        details = {}\n        details['name'] = data[i]['name']\n        details['place_id'] = data[i]['place_id']  # place ID\n        stores.append(details)\n\n    return stores\n\n# Print details of the nearest 24-hour convenience store\nstores = find_nearest_convenience_store()\nfor store in stores[:1]:  # only get the nearest one\n    place_id = store['place_id']\n\n    url = f\"https://maps.googleapis.com/maps/api/place/details/json?place_id={place_id}&fields=name,formatted_phone_number&key=181dbb37\"\n    r = requests.get(url)\n    details = r.json()\n\n    print(f\"Name: {details['result']['name']}\")\n    print(f\"Phone number: {details['result']['formatted_phone_number']}\")",
  "What is the phone number for the nearest taxi service in Atlanta?": "import requests\nimport json\n\ndef find_taxi_service():\n    API_KEY = '181dbb37'  # your google places API Key\n    LOCATION = 'Atlanta,Georgia'\n    RADIUS = 50000\n    KEYWORD = 'Taxi Service'\n\n    url = f\"https://maps.googleapis.com/maps/api/place/textsearch/json?\"\n\n    # The text string on which to search\n    query = f'{KEYWORD} in {LOCATION}'\n\n    r = requests.get(url + 'query=' + query +'&key=' + API_KEY)\n    x = r.json()\n\n    # store the value of 'results' \n    # in the data variable\n    data = x['results']\n\n    # if a taxi service is found, get the place_id of the nearest one\n    if data:\n        place_id = data[0]['place_id']\n        \n        # use the place_id to get the phone number\n        details_url = f\"https://maps.googleapis.com/maps/api/place/details/json?place_id={place_id}&key={API_KEY}\"\n        r = requests.get(details_url)\n        x = r.json()\n        details = x['result']\n        return details['name'], details['formatted_phone_number']\n\ntaxi_name, taxi_phone = find_taxi_service()\n\nprint(f\"Name: {taxi_name}\")\nprint(f\"Phone: {taxi_phone}\")",
  "What was the lowest price of Amazon stock on May 21, 2022?": "import requests\n\nAPI_KEY = 'af8fb19b'\nAPI_URL = 'https://www.alphavantage.co/query'\n\ndata = {\n    'function': 'TIME_SERIES_DAILY',\n    'symbol': 'AMZN',\n    'outputsize': 'full',\n    'apikey': API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nresponse.raise_for_status()\n\ndata = response.json()\n\ndates_to_check = ['2022-05-20', '2022-05-21', '2022-05-22', '2022-05-23']\n\nfor date in dates_to_check:\n    try:\n        lowest_price = float(data['Time Series (Daily)'][date]['3. low'])\n        print(f\"The lowest price of Amazon's stock on {date} was: ${lowest_price}\")\n    except KeyError:\n        print(f\"No data available for Amazon's stock on {date}.\")",
  "Can you tell me if there are any weather alerts or warnings currently in effect for Auckland, New Zealand?": "import requests\n\n\ndef get_severe_weather_warnings(api_key, region):\n    # The base URL for the weather API\n    base_url = \"http://api.weatherapi.com/v1/forecast.json?key={}&q={}&days=1&alerts=yes\"\n\n    # Form the request URL\n    req_url = base_url.format(api_key, region)\n\n    # Send a request to the weather API\n    response = requests.get(req_url)\n\n    # Check if the request was successful\n    if response.status_code != 200:\n        print(\"Error: Unable to retrieve weather data.\")\n        return\n\n    # Load the JSON response\n    data = response.json()\n\n    # Extract the alerts data\n    alerts = data.get('alerts', {}).get('alert', [])\n\n    if len(alerts) == 0:\n        print(\"There are currently no severe weather warnings in effect for {}.\".format(region))\n    else:\n        for alert in alerts:\n            print(\"\\nAlert:\")\n            print(\"Headline: {}\".format(alert['headline']))\n            print(\"Severity: {}\".format(alert['severity']))\n            print(\"Time: Effective from {} until {}\".format(alert['effective'], alert['expires']))\n            print(\"Areas affected: {}\".format(alert['areas']))\n            print(\"Certainty: {}\".format(alert['certainty']))\n            print(\"Description: {}\".format(alert['desc']))\n            print(\"Instructions: {}\\n\".format(alert['instruction']))\n\n\n# Please replace 'Illinois' with your exact location (ex: city name) if you get no result\nget_severe_weather_warnings('b4d5490d', 'Auckland, New Zealand')",
  "What is the address of the closest parking lot to the Golden Gate Bridge in San Francisco?": "import requests\nimport json\n\nAPI_KEY = '181dbb37'\n\ndef get_nearby_parking_lot(lat, lng):\n    endpoint_url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\"\n    params = {\n        'key': API_KEY,\n        'location': '{},{}'.format(lat, lng),\n        'radius': 2000,  # Searching within 2000 meters\n        'type': 'parking'\n    }\n\n    res = requests.get(endpoint_url, params=params)\n    results =  json.loads(res.content)\n\n    if results['results']:\n        closest_parking = results['results'][0]  # The closest parking lot is first result\n        print(\"Name: \" + closest_parking['name'])\n        print(\"Address: \" + closest_parking['vicinity'])\n    else:\n        print(\"No parking lots found in the specified radius.\")\n\n# Golden Gate Bridge Coordinates\ngg_bridge_lat = 37.8199\ngg_bridge_lng = -122.4783\n\nget_nearby_parking_lot(gg_bridge_lat, gg_bridge_lng)",
  "Find the highest price of Paypal in 2021.": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"  # AlphaVantage API key\nsymbol = \"PYPL\"  # Paypal's stock symbol\n\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nstock_data = response.json()\n\n# Extract the high price for entire 2021\nhighest_price = 0\nhighest_date = None\nfor date, values in stock_data[\"Time Series (Daily)\"].items():\n    if date.startswith(\"2021\") and float(values[\"2. high\"]) > highest_price:\n        highest_price = float(values[\"2. high\"])\n        highest_date = date\n\nif highest_date:\n    print(f\"The highest price of Paypal's stock in 2021 was: ${highest_price}, on {highest_date}\")\nelse:\n    print(\"No trading data available for Paypal's stock in 2021.\")",
  "Can you give me the weather conditions for the next 10 days in London, United Kingdom? I want to plan my wardrobe accordingly for my upcoming trip.": "import requests\nimport json\n\ndef get_weather_forecast():\n    # Define API url\n    url = \"http://api.weatherapi.com/v1/forecast.json\"\n    \n    # Define API parameters\n    params = {\n        'key': 'b4d5490d',  # weatherapi API key\n        'q': 'London, United Kingdom',  # location\n        'days': 10  # number of forecast days\n    }\n    \n    # Send GET request to the API\n    response = requests.get(url, params=params)\n\n    # Check if request was successful\n    if response.status_code != 200:\n        print(\"Error:\", response.status_code)\n        return\n    \n    # Parse the JSON response\n    data = json.loads(response.text)\n\n    # Extract and print weather forecast for each day\n    forecasts = data['forecast']['forecastday']\n    for forecast in forecasts:\n        date = forecast['date']\n        condition = forecast['day']['condition']['text']\n        temperature_C = forecast['day']['avgtemp_c']\n        humidity = forecast['day']['avghumidity']\n        print(f\"Date: {date}\")\n        print(f\"Condition: {condition}\")\n        print(f\"Average Temperature: {temperature_C}°C\")\n        print(f\"Humidity: {humidity}%\")\n        print()\n\n# Execute the function\nget_weather_forecast()",
  "Look up the lowest stock price of Procter & Gamble on July 8, 2020.": "import requests\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"  # Alphavantage API key\nsymbol = \"PG\"  # Procter & Gamble stock symbol\n\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nstock_data = response.json()\n\n# Extract the lowest stock price for July 8, 2020\nlow_price = stock_data[\"Time Series (Daily)\"][\"2020-07-08\"][\"3. low\"]\n\nprint(f\"The lowest price of Procter & Gamble's stock on July 8, 2020, was: {low_price}\")",
  "What are some vegetarian restaurants in Los Angeles with their phone numbers and website urls?": "import requests\nimport json\n\nAPI_KEY = '181dbb37'\nPLACES_API_BASE = 'https://maps.googleapis.com/maps/api/place'\nDETAILS_API_BASE = 'https://maps.googleapis.com/maps/api/place/details'\nLOCATION = '34.0522,-118.2437'  # Longitude and latitude for Los Angeles\nRADIUS = '5000'\nKEYWORD = 'vegetarian restaurant'\n\n# Make a 'nearbysearch' request \nplaces_api_url = f\"{PLACES_API_BASE}/nearbysearch/json?location={LOCATION}&radius={RADIUS}&keyword={KEYWORD}&key={API_KEY}\"\n\nplaces_response = requests.get(places_api_url)\nplaces_data = places_response.json()\n\n# Loop through the results and make a 'details' request for each place\nfor place in places_data['results']:\n    place_id = place['place_id']\n    details_api_url = f\"{DETAILS_API_BASE}/json?place_id={place_id}&fields=name,formatted_phone_number,website&key={API_KEY}\"\n    \n    details_response = requests.get(details_api_url)\n    details_data = details_response.json()\n\n    name = details_data['result'].get('name')\n    phone_number = details_data['result'].get('formatted_phone_number')\n    website = details_data['result'].get('website')\n    \n    print(f\"Name: {name}\")\n    print(f\"Phone Number: {phone_number}\")\n    print(f\"Website: {website}\")\n    print('\\n')",
  "I am planning a trip to Sydney, Australia next week, can you give me the expected weather conditions and temperature?": "import requests\n\nAPI_KEY = 'b4d5490d'\nURL = 'https://api.weatherapi.com/v1/forecast.json'\n\nparams = {\n    'key': API_KEY,\n    'q': 'Sydney, Australia',\n    'days': 7,\n}\n\nresponse = requests.get(URL, params=params)\ndata = response.json()\n\nforecast = data['forecast']['forecastday']\n\nprint(\"Expected weather conditions and temperature for Sydney, Australia next week:\")\n\nfor day in forecast:\n    date = day['date']\n    weather = day['day']['condition']['text']\n    avg_temp_c = day['day']['avgtemp_c']\n    print(f\"{date}: Weather: {weather}, Average Temperature: {avg_temp_c}°C\")",
  "I'm planning to go for a boat ride off the coast of Phuket, Thailand, next weekend. Can you tell me what to expect in terms of wind speed and precipitation?": "import requests\nimport datetime\n\napi_key = 'b4d5490d'\ncity = 'Phuket, Thailand'\n\n# Get the weather forecast for the next 10 days\nurl = f\"http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city}&days=10\"\nresponse = requests.get(url)\nweather_data = response.json()\n\n# Determine the start and end dates for the upcoming weekend (Saturday and Sunday)\ndate_format = \"%Y-%m-%d\"\nsaturday = None\nsunday = None\nfor day in weather_data['forecast']['forecastday']:\n    date = day['date']\n    weekday = datetime.datetime.strptime(date, date_format).weekday()\n    if weekday == 5:  # Saturday\n        saturday = day\n    elif weekday == 6:  # Sunday\n        sunday = day\n    if saturday and sunday:\n        break\n\nif not saturday or not sunday:\n    print(\"Unable to retrieve weather forecast for the upcoming weekend.\")\nelse:\n    wind_speed_saturday = saturday['day']['maxwind_kph']\n    precipitation_saturday = saturday['day']['totalprecip_mm']\n    wind_speed_sunday = sunday['day']['maxwind_kph']\n    precipitation_sunday = sunday['day']['totalprecip_mm']\n\n    print(f\"Wind Speed for Saturday: {wind_speed_saturday} kph\")\n    print(f\"Precipitation for Saturday: {precipitation_saturday} mm\")\n    print(f\"Wind Speed for Sunday: {wind_speed_sunday} kph\")\n    print(f\"Precipitation for Sunday: {precipitation_sunday} mm\")",
  "Recommend some museums in Washington D.C. that are open on Monday.": "import requests\n\n# API key for Google Places\nAPI_KEY = '181dbb37'\n\n# define our endpoint\nendpoint = f\"https://maps.googleapis.com/maps/api/place/textsearch/json?query=museums+in+Washington+DC&key={API_KEY}\"\n\n# make a request to the Google Places API\nres = requests.get(endpoint)\n\n# convert the response to json\ndata = res.json()\n\n# print the name of museums and respective open days\nfor place in data['results']:\n    place_id = place['place_id']\n    endpoint = f'https://maps.googleapis.com/maps/api/place/details/json?place_id={place_id}&fields=opening_hours&key={API_KEY}'\n    res = requests.get(endpoint)\n    detail = res.json()\n\n    if 'opening_hours' in detail['result']:\n        if 'open_now' in detail['result']['opening_hours']:\n            if detail['result']['opening_hours']['weekday_text'][0].find('Closed') == -1: # Monday is the first day -> [0]\n                print(place['name'] + ' is open on Monday.')\n            else:\n                print(place['name'] + ' is closed on Monday.')\n        else:\n            print(place['name'] + ' does not have opening hours information.')\n    else:\n        print(place['name'] + ' does not provide opening hours information.')",
  "Can you provide the visibility distance for Chicago right now?": "import requests\nimport json\n\ndef get_weather_conditions():\n    # Define API url\n    url = \"http://api.weatherapi.com/v1/current.json\"\n\n    # Define API parameters\n    params = {\n        'key': 'b4d5490d',  # weatherapi api key\n        'q': 'Chicago, Illinois',  # location\n        'aqi': 'no'  # exclude Air Quality Index (AQI) data\n    }\n\n    # Send GET request to the API\n    response = requests.get(url, params=params)\n    \n    # Parse the JSON response\n    data = json.loads(response.text)\n    \n    # Print the wind and visibility conditions\n    print('Visibility distance in Chicago, Illinois right now:')\n    print('Distance:', data['current']['vis_km'], 'km')\n\nget_weather_conditions()",
  "Can you provide me with the closing price of Alibaba Group's stock last month?": "import requests\nfrom datetime import datetime\n\n# Get today's date\ntoday = datetime.today()\n\n# Get last month's year and month\nif today.month == 1:\n    year = today.year - 1\n    month = 12\nelse:\n    year = today.year\n    month = today.month - 1\n\n# Your alphavantage API key\napi_key = 'af8fb19b'\n\n# Alibaba's symbol on the stock market\nsymbol = 'BABA'\n\n# Convert month to 2-digit format\nmonth = str(month).zfill(2)\n\n# URL for Alpha Vantage API\nurl = f'https://www.alphavantage.co/query?function=TIME_SERIES_MONTHLY_ADJUSTED&symbol={symbol}&apikey={api_key}'\n\n# Send GET request\nresponse = requests.get(url)\n\n# Convert the response to JSON\ndata = response.json()\n\ntry:\n  # Get the trading days data for last month\n  trading_days = [day for day in data['Monthly Adjusted Time Series'].keys() if day.startswith(f'{year}-{month}')]\n\n  # sort the dates\n  trading_days.sort()\n\n  # Find the last trading day of last month\n  last_trading_day = trading_days[-1]\n\n  # get the closing price of Alibaba's stock on the last trading day of last month \n  closing_price = data['Monthly Adjusted Time Series'][last_trading_day]['4. close']\n\n  print(f'The closing price of Alibaba Group\\'s stock on the last trading day of last month ({last_trading_day}) was {closing_price}.')\n\nexcept Exception as e:\n  print(f'An error occurred: {e}')",
  "Can you give me the trading volume of Google stock on March 5, 2020?": "import requests\n\n# API key\napi_key = 'af8fb19b'  # replace 'YOUR_API_KEY' with your actual Alpha Vantage API key\n\n# Function to get trading volume for a specific stock on a specific date\ndef get_trading_volume(symbol, date):\n    url = f\"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&outputsize=full&apikey={api_key}\"\n    response = requests.get(url)\n    data = response.json()\n\n    # Check if the date is available in the response\n    if date in data['Time Series (Daily)']:\n        trading_volume = data['Time Series (Daily)'][date]['5. volume']\n        return trading_volume\n    else:\n        return \"Date not found\"\n\n# Get trading volume for Google stock on March 5, 2020\nsymbol = 'GOOGL'\ndate = '2020-03-05'\ntrading_volume = get_trading_volume(symbol, date)\nprint(f\"The trading volume of {symbol} stock on {date} was {trading_volume}\")",
  "How windy will it be in Chicago, USA, next Wednesday, and what's the expected wind direction?": "import requests\nfrom datetime import datetime, timedelta\n\n\ndef get_wind_forecast(city='Chicago', api_key='b4d5490d'):\n    BASE_URL = \"http://api.weatherapi.com/v1/forecast.json\"\n\n    # date for next Wednesday\n    today = datetime.today()\n    next_wednesday = today + timedelta((2 - today.weekday() + 7) % 7)\n    date_str = next_wednesday.strftime(\"%Y-%m-%d\")\n\n    response = requests.get(BASE_URL, params={'key': api_key, 'q': city, 'dt': date_str})\n    data = response.json()\n\n    forecast = data['forecast']['forecastday'][0]\n    max_wind_kph = forecast['day']['maxwind_kph']\n    print(f\"Max wind speed in {city} next Wednesday is {max_wind_kph} kph\")\n\n    for i, hour in enumerate(forecast['hour']):\n        print(f'wind speed and wind direction during {i+1}-th hour:', hour['wind_kph'], hour['wind_dir'])\n\n\nget_wind_forecast()",
  "Give me the address of the nearest grocery store to the Statue of Liberty.": "import requests\nimport json\n\ndef find_place_near_location(api_key, address, place_type):\n    # base URL for geocoding\n    geocoding_base_url = \"https://maps.googleapis.com/maps/api/geocode/json?\"\n\n    # prepare the complete URL for geocoding\n    geocoding_url = f\"{geocoding_base_url}address={address}&key={api_key}\"\n\n    # make a request for geocoding\n    geocoding_response = requests.get(geocoding_url)\n\n    # convert the response to JSON format\n    data = geocoding_response.json()\n\n    # if results exist, extract the latitude and longitude\n    if len(data['results']) > 0:\n        geometry = data['results'][0]['geometry']\n        location = f\"{geometry['location']['lat']},{geometry['location']['lng']}\"\n\n        # base URL for nearby search\n        nearby_search_base_url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json?\"\n\n        # define the radius (in meters)\n        radius = 5000  # approximately 3.1 miles\n\n        # prepare the complete URL for nearby search\n        nearby_search_url = f\"{nearby_search_base_url}location={location}&radius={radius}&type={place_type}&key={api_key}\"\n\n        # make a request for nearby search\n        nearby_search_response = requests.get(nearby_search_url)\n\n        # convert the response to JSON format\n        data = nearby_search_response.json()\n\n        # if results exist, extract the place_id of the first result\n        if len(data['results']) > 0:\n            place_id = data['results'][0]['place_id']\n\n            # base URL for place details\n            place_details_base_url = \"https://maps.googleapis.com/maps/api/place/details/json?\"\n\n            # prepare the complete URL for place details\n            place_details_url = f\"{place_details_base_url}place_id={place_id}&fields=formatted_address,name&key={api_key}\"\n\n            # make a request for place details\n            place_details_response = requests.get(place_details_url)\n\n            # convert the response to JSON format\n            data = place_details_response.json()\n\n            # if result exists, return the name and address of the place\n            if 'result' in data and 'formatted_address' in data['result']:\n                return data['result']['name'] + \", \" + data['result']['formatted_address']\n            \n            else:\n                return f\"No address found for the grocery store near {address}\"\n        else:\n            return f\"No grocery store found near {address}\"\n    else:\n        return f\"Unable to geocode the address: {address}\"\n\napi_key = \"181dbb37\"\naddress = \"Statue of Liberty, New York, NY\"\nplace_type = \"grocery_or_supermarket\"\nprint(find_place_near_location(api_key, address, place_type))",
  "List all the parking garages near the Staples Center in Los Angeles.": "import requests\nimport json\nimport time\n\nAPI_KEY = '181dbb37'  # This is the provided API key for Google Places\n\ndef get_places_data(lat, lng, keyword):\n    endpoint_url = \"https://maps.googleapis.com/maps/api/place/nearbysearch/json\"\n    places = []\n    params = {\n        'key': API_KEY,\n        'location': '{},{}'.format(lat, lng),\n        'rankby': 'distance',\n        'keyword': keyword\n    }\n\n    res = requests.get(endpoint_url, params=params)\n    results =  json.loads(res.content)\n\n    places.extend(results['results'])\n    time.sleep(2)\n\n    while \"next_page_token\" in results:\n        params['pagetoken'] = results['next_page_token'],\n        res = requests.get(endpoint_url, params=params)\n        results = json.loads(res.content)\n        places.extend(results['results'])\n        time.sleep(2)\n\n    return places\n\ndef get_place_details(place_id):\n    endpoint_url = \"https://maps.googleapis.com/maps/api/place/details/json\"\n    params = {\n        'key': API_KEY,\n        'place_id': place_id,\n        'fields': 'name,address_component,formatted_address'\n    }\n    \n    res = requests.get(endpoint_url, params=params)\n    place_details = json.loads(res.content)\n\n    return place_details\n\nstaples_center_lat = 34.0430175  # Latitude for Staples Center\nstaples_center_lng = -118.2672541  # Longitude for Staples Center\nkeyword = \"Parking Garage\"  # Keyword to search for\nplaces_data = get_places_data(staples_center_lat, staples_center_lng, keyword)\n\nfor place in places_data:\n    place_id = place['place_id']\n    place_details = get_place_details(place_id)\n    print('Parking Garage Name:', place_details['result']['name'])\n    print('Address:', place_details['result']['formatted_address'])\n    print('----------------------')",
  "I'm looking for a hairstylist who specializes in curly hair. Can you give me a list of salons in Miami?": "import requests\nimport json\n\nAPI_URL = \"https://maps.googleapis.com/maps/api/place/textsearch/json\"\nAPI_KEY = \"181dbb37\"\n\nquery = \"hairstylist specializing in curly hair in Miami\"\n\nparams = {\n    \"query\": query,\n    \"key\": API_KEY\n}\n\nresponse = requests.get(API_URL, params=params)\ndata = response.json()\n\nresults = data[\"results\"]\n\nfor result in results:\n    print(result[\"name\"])",
  "What was Intel's highest trading price in the last year?": "import requests\nimport json\nfrom datetime import datetime, timedelta\n\ndef get_stock_data(symbol, api_key):\n    base_url = \"https://www.alphavantage.co/query\"\n    function = \"TIME_SERIES_DAILY\"\n    datatype = \"json\"\n\n    response = requests.get(f'{base_url}?function={function}&symbol={symbol}&apikey={api_key}&datatype={datatype}')\n    data = json.loads(response.text)\n\n    # Get the date one year from now\n    one_year_ago = (datetime.now() - timedelta(days=365)).strftime('%Y-%m-%d')\n\n    # Filter the data to get only the past year's data\n    past_year_data = {date: info for date, info in data['Time Series (Daily)'].items() if date >= one_year_ago}\n\n    # Get the highest trading price in the past year\n    highest_price = max([float(info['2. high']) for info in past_year_data.values()])\n\n    return highest_price\n\n# The symbol 'INTC' is for the Intel Corporation\nhighest_price = get_stock_data('INTC', 'af8fb19b')\n\nprint(f\"The highest trading price of Intel Corporation in the past year was ${highest_price:.2f}\")",
  "Can you give me some information about the historical landmarks in Athens?": "import requests\n\napi_key = '181dbb37'\nendpoint = 'https://maps.googleapis.com/maps/api/place/textsearch/json'\nquery = 'historical landmarks in Athens'\n\nparams = {\n    'query': query,\n    'key': api_key\n}\n\nresponse = requests.get(endpoint, params=params)\ndata = response.json()\n\nfor result in data['results']:\n    print('Name:', result['name'])\n    print('Address:', result['formatted_address'])\n    print('Rating:', result.get('rating', 'Not available'))\n    print('---')",
  "What is the current exchange rate for USD (US Dollar) to EUR (Euro)?": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"\n\nparams = {\n    \"function\": \"CURRENCY_EXCHANGE_RATE\",\n    \"from_currency\": \"USD\",\n    \"to_currency\": \"EUR\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=params)\ndata = response.json()\n\nexchange_rate = data['Realtime Currency Exchange Rate']['5. Exchange Rate']\nprint(f\"The exchange rate between USD and EUR is {exchange_rate}\")",
  "Is there a McDonald's near the Eiffel Tower in Paris? If so, what is the address?": "import requests\n\n# Define the API key\nAPI_KEY = '181dbb37'\n\n# Define the search parameters\nlocation = '48.8584,2.2945'  # Coordinates of Eiffel Tower\nradius = 1000  # Search within 1 kilometer\nkeyword = \"McDonald's\"\n\n# Make the API request\nurl = f'https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={location}&radius={radius}&keyword={keyword}&key={API_KEY}'\nresponse = requests.get(url)\n\n# Parse the response JSON\ndata = response.json()\n\n# Check if any McDonald's is found\nif data['status'] == 'OK' and 'results' in data:\n    # Get the first result (closest McDonald's)\n    mcdonalds = data['results'][0]\n\n    # Get the address of the McDonald's\n    address = mcdonalds['vicinity']\n\n    print(f\"The address of the nearest McDonald's to the Eiffel Tower is: {address}\")\nelse:\n    print(\"No McDonald's found near the Eiffel Tower.\")",
  "What was the trading volume of Amazon on June 15, 2018?": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"  # Alphavantage API key\nsymbol = \"AMZN\"  # Amazon Inc.'s stock symbol\n\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nstock_data = response.json()\n\n# Get the exchange volume for June 15, 2018\nvolume_date = '2018-06-15'\nif volume_date in stock_data['Time Series (Daily)']:\n    volume = int(stock_data['Time Series (Daily)'][volume_date][\"5. volume\"])\n    print(f'On {volume_date}, Amazon (symbol: {symbol}) stock trading volume was: {volume}')\nelse:\n    print(f'No trading data available for Amazon on {volume_date}')",
  "How many shares of Google were traded on July 20, 2020?": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"\n\nparams = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": \"GOOGL\",\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=params)\ndata = response.json()\n\ndaily_data = data['Time Series (Daily)']\ndates = list(daily_data.keys())\nshares_traded = None\n\n# Find the shares traded on July 20, 2020\nfor date in dates:\n    if date.startswith(\"2020-07-20\"):\n        shares_traded = daily_data[date]['5. volume']\n        break\n\nif shares_traded:\n    print(f\"The number of shares of Google traded on July 20, 2020 was {shares_traded}.\")\nelse:\n    print(\"Data not available for July 20, 2020.\")",
  "How hot is it in Las Vegas, Nevada today? Should I bring a jacket for the cooler evening temperatures?": "import requests\n\n# API key for WeatherAPI\nweather_api_key = 'b4d5490d'\n\n# City name\ncity_name = \"Las Vegas\"\n\ndef get_current_and_forecast_temp(city_name):\n    base_url = f\"http://api.weatherapi.com/v1/current.json?key={weather_api_key}&q={city_name}\"\n    response = requests.get(base_url)\n    data = response.json()\n    \n    # Collect current temperature\n    current_temp = data['current']['temp_c']\n    \n    base_url = f\"http://api.weatherapi.com/v1/forecast.json?key={weather_api_key}&q={city_name}&days=1\"\n    response = requests.get(base_url)\n    data = response.json()\n    \n    # Collect evening temperature\n    evening_temp = data['forecast']['forecastday'][0]['hour'][20]['temp_c'] # Temperature at 8 pm\n    \n    return current_temp, evening_temp\n\n# Get the current temperature and expected evening temperature\ncurrent_temp, evening_temp = get_current_and_forecast_temp(city_name)\n\nprint(f\"The current temperature in Las Vegas, Nevada is {current_temp} Celsius. The expected temperature this evening is {evening_temp} Celsius.\")",
  "How cold will it get tonight in Anchorage, Alaska?": "import requests\nfrom datetime import datetime, timedelta\n\n# API keys\napi_keys = {\n    'weatherapi': 'b4d5490d'\n}\n\n# Function to fetch weather forecast\ndef fetch_weather_forecast(city, date):\n    api_key = api_keys['weatherapi']\n    url = f\"http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city}&dt={date}\"\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n\n# Fetch weather forecast for Anchorage, Alaska tonight\ncity = 'Anchorage, Alaska'\ncurrent_date = datetime.now()\ndate_str = current_date.strftime(\"%Y-%m-%d\")\n\nweather_data = fetch_weather_forecast(city,date_str)\n\n# Check if weather data is available and print the minimum temperature\nif weather_data:\n    min_temp = weather_data['forecast']['forecastday'][0]['day']['mintemp_c']\n    print(f\"Minimum Temperature tonight: {min_temp} °C\")\nelse:\n    print('Failed to fetch weather data.')",
  "How will the weather be for hiking in the Rocky Mountains National Park in Colorado, USA, starting from 3 days from now?": "import requests\nimport json\n\n\ndef get_weather_forecast():\n    # Define API url\n    url = \"http://api.weatherapi.com/v1/forecast.json\"\n\n    # Define API parameters\n    params = {\n        'key': 'b4d5490d',  # weatherapi api key\n        'q': 'Rocky Mountains National Park, Colorado, USA',  # location\n        'days': 7  # forecast for next 7 days\n    }\n\n    # Send GET request to the API\n    response = requests.get(url, params=params)\n\n    # Parse the JSON response\n    data = json.loads(response.text)\n\n    # Print the weather forecast\n    for forecast in data['forecast']['forecastday']:\n        print('Date:', forecast['date'])\n        print('Max temp:', forecast['day']['maxtemp_f'], 'F')\n        print('Min temp:', forecast['day']['mintemp_f'], 'F')\n        print('Average humidity:', forecast['day']['avghumidity'], '%')\n        print('Condition:', forecast['day']['condition']['text'])\n        print('---------')\n\n\nget_weather_forecast()",
  "Provide me the trading volume of Amazon's stock on June 3, 2016.": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"  # Alphavantage API key\nsymbol = \"AMZN\"  # Amazon Inc.'s stock symbol\n\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nstock_data = response.json()\n\n# Get the exchange volume for June 3, 2016\nvolume_date = '2016-06-03'\nif volume_date in stock_data['Time Series (Daily)']:\n    volume = int(stock_data['Time Series (Daily)'][volume_date][\"5. volume\"])\n    print(f'On {volume_date}, Amazon (symbol: {symbol}) stock trading volume was: {volume}')\nelse:\n    print(f'No trading data available for Amazon on {volume_date}')",
  "What are the top-rated seafood restaurants in Cancun, Mexico with an ocean view?": "import requests\n\ndef find_restaurant():\n    # API key \n    API_KEY = '181dbb37'  # your google places API Key\n    LOCATION = 'Cancun, Mexico'\n    KEYWORD = 'Seafood Restaurant with Ocean View'  # Keyword updated to include 'ocean view'\n    \n    url = \"https://maps.googleapis.com/maps/api/place/textsearch/json?\"\n\n    query = f'{KEYWORD} in {LOCATION}'\n\n    r = requests.get(url + 'query=' + query +'&key=' + API_KEY)\n    x = r.json()\n\n    data = x['results']\n\n    # store the restaurant info\n    restaurants = []\n    for i in range(len(data)):\n        details = {}\n        details['name'] = data[i]['name']\n        details['address'] = data[i]['formatted_address']\n        details['rating'] = data[i]['rating']\n        restaurants.append(details)\n    \n    top_rated_restaurants = sorted(restaurants, key = lambda i: i['rating'], reverse=True)  # Sort the restaurants based on ratings in descending order\n    \n    return top_rated_restaurants\n\nrestaurants = find_restaurant()\nfor restaurant in restaurants:\n    print(f\"Name: {restaurant['name']}\")\n    print(f\"Address: {restaurant['address']}\")\n    print(f\"Rating: {restaurant['rating']}\\n\")",
  "Is it safe to travel to Tokyo today given the forecasted weather conditions?": "import requests\n\ndef get_weather_forecast(city):\n    api_key = 'b4d5490d'\n    \n    # Get current weather data\n    base_url_current = f\"http://api.weatherapi.com/v1/current.json?key={api_key}&q={city}\"\n    response_current = requests.get(base_url_current)\n    data_current = response_current.json()\n    \n    print(f\"Current weather in {city}:\")\n    print(f\"Temperature is: {data_current['current']['temp_c']}C\")\n    print(f\"Weather condition is: {data_current['current']['condition']['text']}\")\n\n    # Get forecast weather data\n    base_url_forecast = f\"http://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city}&days=1\"\n    response_forecast = requests.get(base_url_forecast)\n    data_forecast = response_forecast.json()\n\n    print(f\"Weather forecast for the rest of the day in {city}:\")\n    forecast_condition = data_forecast['forecast']['forecastday'][0]['day']['condition']['text']\n    print(f\"Weather condition is: {forecast_condition}\")\n    \n    max_temp = data_forecast['forecast']['forecastday'][0]['day']['maxtemp_c']\n    min_temp = data_forecast['forecast']['forecastday'][0]['day']['mintemp_c']\n    print(f\"Max temperature: {max_temp}C\")\n    print(f\"Min temperature: {min_temp}C\")\n\n    # Check for extreme conditions\n    extreme_conditions = ['Thunderstorm', 'Heavy Rain', 'Snow', 'Blizzard', 'Hail']\n    too_hot_temp = 35\n    too_cold_temp = -5\n\n    if forecast_condition in extreme_conditions or max_temp > too_hot_temp or min_temp < too_cold_temp:\n        print(f\"Considering the forecast weather conditions, it might not be safe to travel to {city} today.\")\n    else:\n        print(f\"Considering the forecast weather conditions, it appears safe to travel to {city} today.\")\n\nget_weather_forecast(\"Tokyo\")",
  "Is there a public library in Houston that offers 3D printing services? If so, can you give me its address and hours?": "import requests\nimport json\n\n# Use Google Places API\napi_key = \"181dbb37\"  \n\n# Define the search query\nquery = \"public library 3D printing Houston\"\n\n# url to send GET request\nurl = \"https://maps.googleapis.com/maps/api/place/textsearch/json?\"\n# get method of requests module. return response object.\nres = requests.get(url + 'query=' + query + '&key=' + api_key)\n\n# json method of response object: json format data into python format data\ndata = res.json()\n\n# Extract result \nif data['status'] == 'OK':\n\n    # Get the first place that Google returns\n    location_data = data['results'][0]\n\n    # Get place details\n    name = location_data.get('name')\n    formatted_address = location_data.get('formatted_address')\n    place_id = location_data['place_id']\n\n    # output\n    print(f'Name: {name}')\n    print(f'Address: {formatted_address}')\n\n    # Get place hours\n    place_url = f\"https://maps.googleapis.com/maps/api/place/details/json?place_id={place_id}&fields=opening_hours&key={api_key}\"\n\n    res = requests.get(place_url)\n    \n    place_data = res.json()\n\n    if 'opening_hours' in place_data['result']:\n        print(\"Working Hours:\")\n        for day in place_data['result']['opening_hours']['weekday_text']:\n            print(day)\n    else:\n        print(\"Working hours Not Found.\")\nelse:\n    print(\"No library with 3D services in Houston found.\")",
  "Give me the phone number for the nearest post office in Vancouver.": "import requests\n\ndef find_post_office(api_key, latitude, longitude):\n    url = f\"https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={latitude},{longitude}&radius=5000&keyword=post%20office&key={api_key}\"\n\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        if data['status'] == 'OK':\n            if data['results']:\n                # take the first post office from the list\n                post_office = data['results'][0]\n                # get its place id\n                place_id = post_office['place_id']\n                # return the place id\n                return place_id\n            else:\n                print(\"No post office found nearby.\")\n        else:\n            print(\"Error in response from API: \", data['status'])\n    else:\n        print(f\"Failed to send request, status code: {response.status_code}\")\n\n\ndef get_phone_number(api_key, place_id):\n    url = f\"https://maps.googleapis.com/maps/api/place/details/json?place_id={place_id}&fields=name,formatted_phone_number&key={api_key}\"\n\n    response = requests.get(url)\n    if response.status_code == 200:\n        data = response.json()\n        if data['status'] == 'OK':\n            # get the details of the post office\n            details = data['result']\n            # print the name and phone number of the post office\n            return (details['name'], details['formatted_phone_number'])\n        else:\n            print(\"Error in response from API: \", data['status'])\n    else:\n        print(f\"Failed to send request, status code: {response.status_code}\")\n\n\nAPI_KEY = '181dbb37'\nlatitude = 49.2827291\nlongitude = -123.1207375\nplace_id = find_post_office(API_KEY, latitude, longitude)\nprint(get_phone_number(API_KEY, place_id))",
  "I'm looking for a 24-hour pharmacy in Montreal, can you find one for me?": "import requests\n\napi_key = '181dbb37' # Your Google Places API key\n\n# Set the API endpoint URL\nurl = 'https://maps.googleapis.com/maps/api/place/textsearch/json'\n\n# Set the parameters for the request\nparams = {\n    'query': '24-hour pharmacy in Montreal',\n    'key': api_key\n}\n\n# Send the GET request\nresponse = requests.get(url, params=params)\n\n# Get the JSON response\ndata = response.json()\n\n# Check if any results are found\nif data['status'] == 'OK':\n    # Print the name and address of the pharmacy\n    for place in data['results']:\n        print(place['name'], place['formatted_address'])\nelse:\n    print('No results found')",
  "Could you suggest a good bookstore that has a large collection of science fiction novels in Chicago?": "import requests\n\ndef find_scifi_bookstores():\n    # API key \n    API_KEY = '181dbb37'  # use your Google Places API Key\n    LOCATION = 'Chicago'\n    KEYWORD = 'Science Fiction Bookstore'\n    \n    url = \"https://maps.googleapis.com/maps/api/place/textsearch/json?\"\n\n    query = f'{KEYWORD} in {LOCATION}'\n\n    r = requests.get(url + 'query=' + query +'&key=' + API_KEY)\n    x = r.json()\n\n    data = x['results']\n\n    # store the bookstore info\n    bookstores = []\n    for i in range(len(data)):\n        details = {}\n        details['name'] = data[i]['name']\n        details['address'] = data[i]['formatted_address']\n        if 'rating' in data[i]: \n            details['rating'] = data[i]['rating']\n        else:\n            details['rating'] = 'No rating'\n        bookstores.append(details)\n    \n    return bookstores\n\nbookstores = find_scifi_bookstores()\nfor bookstore in bookstores:\n    print(f\"Name: {bookstore['name']}\")\n    print(f\"Address: {bookstore['address']}\")\n    print(f\"Rating: {bookstore['rating']}\\n\")",
  "Are there any farmers markets in San Diego that sell organic produce?": "import requests\nimport json\n\nAPI_URL = \"https://maps.googleapis.com/maps/api/place/textsearch/json\"\nAPI_KEY = \"181dbb37\"\n\nquery = \"farmers markets in San Diego that sell organic produce\"\n\nparams = {\n    \"query\": query,\n    \"key\": API_KEY\n}\n\nresponse = requests.get(API_URL, params=params)\ndata = response.json()\n\nresults = data[\"results\"]\n\nif len(results) == 0:\n    print(\"No farmers markets found.\")\nelse:\n    print(\"Farmers markets in San Diego that sell organic produce:\")\n    for result in results:\n        print(result[\"name\"])",
  "Can you give me the opening price of Microsoft for the month of January 2021?": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"\n\nparams = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": \"MSFT\",\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=params)\ndata = response.json()\n\ndaily_data = data['Time Series (Daily)']\ndates = list(daily_data.keys())\nopening_prices = []\n\n# Find the opening prices for January 2021\nfor date in dates:\n    if date.startswith(\"2021-01\"):\n        opening_price = daily_data[date]['1. open']\n        opening_prices.append(f\"The opening price of Microsoft on {date} was {opening_price}\")\n\nif opening_prices:\n    print(\"\\n\".join(opening_prices))\nelse:\n    print(\"Data not available for January 2021.\")",
  "What was the closing price of Microsoft's stock on May 3, 2021?": "import requests\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"\n\nparams = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": \"MSFT\",\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=params)\ndata = response.json()\n\ndaily_data = data['Time Series (Daily)']\nclose_price = None\n\n# Find the close price for May 3, 2021\nfor date, info in daily_data.items():\n    if date == \"2021-05-03\":\n        close_price = info['4. close']\n        break\n\nif close_price:\n    print(f\"The close price of Microsoft on May 3, 2021 was {close_price}\")\nelse:\n    print(\"Data not available for May 3, 2021.\")",
  "What is the current market status of the S&P500 index?": "import yfinance as yf\n\ndef get_market_status():\n    sp500_ticker = \"^GSPC\"  # Ticker symbol for S&P500 index\n\n    try:\n        sp500 = yf.Ticker(sp500_ticker)\n        return sp500.history(period=\"1d\").iloc[-1]\n\n    except Exception as e:\n        return f\"An error occurred: {str(e)}\"\n\nprint(get_market_status())",
  "Inquire about the exchange volume of Adobe on April 6, 2022.": "import requests\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"  # Alphavantage API key, replace this with your own key\nsymbol = \"ADBE\"  # Adobe Inc.'s stock symbol\ntarget_date = \"2022-04-06\"  # date to retrive the data for\n\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nstock_data = response.json()\n\n# Find and print the volume of trading on the target day\ntrading_data = stock_data[\"Time Series (Daily)\"].get(target_date, None)\nif trading_data is not None:\n    volume = trading_data[\"5. volume\"]\n    print(f'The exchange volume for Adobe stocks on {target_date} was {volume}.')\nelse:\n    print(f'Data for {target_date} is not available or the market was closed.')",
  "Can you give me the closing price of Exxon Mobil's stock on December 31, 2020?": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"\n\nparams = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": \"XOM\",\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=params)\ndata = response.json()\n\ndaily_data = data['Time Series (Daily)']\ndates = list(daily_data.keys())\nclosing_price = None\n\n# Find the closing price for December 31, 2020\nfor date in dates:\n    if date.startswith(\"2020-12-31\"):\n        closing_price = daily_data[date]['4. close']\n        break\n\nif closing_price:\n    print(f\"The closing price of Exxon Mobil's stock on December 31, 2020 was {closing_price}\")\nelse:\n    print(\"Data not available for December 31, 2020.\")",
  "Can you retrieve the opening and closing price of Tesla on June 12, 2021?": "import requests\nimport json\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"  # Alphavantage API key as defined in the given dictionary\nsymbol = \"TSLA\"  # Tesla's stock symbol\n\ndata = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": symbol,\n    \"outputsize\": \"full\",  # Use 'full' to get more historical data\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=data)\nstock_data = response.json()\n\n# Define the target date\ntarget_date = '2021-06-12'\nif target_date in stock_data['Time Series (Daily)']:\n    date_data = stock_data['Time Series (Daily)'][target_date]\n    print(f'For {target_date}, Tesla (Symbol: {symbol}) stock opened at: {date_data[\"1. open\"]} and closed at: {date_data[\"4. close\"]}')\nelse:\n    print(f'There is no data for {symbol} on {target_date}.')",
  "Inquire about the exchange volume of Alibaba stocks in the last quarter.": "import requests\nimport datetime\n\nAPI_URL = \"https://www.alphavantage.co/query\"\nAPI_KEY = \"af8fb19b\"\n\nparams = {\n    \"function\": \"TIME_SERIES_DAILY\",\n    \"symbol\": \"BABA\",\n    \"outputsize\": \"full\",\n    \"apikey\": API_KEY,\n}\n\nresponse = requests.get(API_URL, params=params)\ndata = response.json()\n\ndaily_data = data['Time Series (Daily)']\ndates = list(daily_data.keys())\n\ncurrent_date = datetime.date.today()\nthree_months_ago = current_date - datetime.timedelta(days=90)\nlast_quarter_start = three_months_ago.replace(day=1)\nlast_quarter_end = (current_date + datetime.timedelta(days=1)).replace(day=1)\n\nquarterly_volume = 0\n\nfor date_str in dates:\n    date = datetime.datetime.strptime(date_str, '%Y-%m-%d').date()\n    if date >= last_quarter_start and date < last_quarter_end:\n        volume = int(daily_data[date_str]['5. volume'])\n        quarterly_volume += volume\n\nprint(f\"The exchange volume of Alibaba stocks in the last quarter was {quarterly_volume}\")",
  "What is the expected weather forecast for the remainder of the week in the Santa Monica area?": "import requests\nimport json\n\nAPI_KEY = 'b4d5490d'  # WeatherAPI key\nCITY_NAME = 'Santa Monica'  # the city we want the forecast for\nAPI_URL = f'http://api.weatherapi.com/v1/forecast.json?key={API_KEY}&q={CITY_NAME}&days=7'  # API request URL\n\nresponse = requests.get(API_URL)\ndata = response.json()\n\nforecast = data['forecast']['forecastday']\n\nfor day in forecast:\n    date = day['date']\n    condition_text = day['day']['condition']['text']\n    max_temp = day['day']['maxtemp_f']\n    min_temp = day['day']['mintemp_f']\n    avg_temp = day['day']['avgtemp_f']\n\n    print(f\"Weather forecast for {date} in {CITY_NAME}:\")\n    print(f\"Condition: {condition_text}\")\n    print(f\"Maximum Temperature: {max_temp}°F\")\n    print(f\"Minimum Temperature: {min_temp}°F\")\n    print(f\"Average Temperature: {avg_temp}°F\")\n    print(\"-\" * 50)",
  "I have a flight to New York tomorrow. Can you provide me with the expected weather conditions in the city at the time of my arrival?": "import requests\nimport json\nimport datetime\n\ndef get_weather_at_arrival():\n    # Define API url\n    url = \"http://api.weatherapi.com/v1/forecast.json\"\n    \n    # Define API parameters\n    params = {\n        'key': 'b4d5490d',  # weatherapi api key\n        'q': 'New York',  # location\n        'days': 2  # forecast for next 2 days\n    }\n    \n    # Send GET request to the API\n    response = requests.get(url, params=params)\n\n    # Check if the request was successful\n    if response.status_code != 200:\n        print(\"Error:\", response.status_code)\n        return\n    \n    # Parse the JSON response\n    data = json.loads(response.text)\n\n    # Get tomorrow's date\n    tomorrow = datetime.date.today() + datetime.timedelta(days=1)\n\n    # Get the forecast for tomorrow\n    forecast = next((forecast for forecast in data['forecast']['forecastday'] if forecast['date'] == tomorrow.strftime(\"%Y-%m-%d\")), None)\n\n    # Check if the forecast for tomorrow is available\n    if forecast is None:\n        print(\"No forecast available for tomorrow.\")\n        return\n    \n    # Print the weather conditions\n    print('Date:', forecast['date'])\n    print('Max temp:', forecast['day']['maxtemp_f'], 'F')\n    print('Min temp:', forecast['day']['mintemp_f'], 'F')\n    print('Average humidity:', forecast['day']['avghumidity'], '%')\n    print('Condition:', forecast['day']['condition']['text'])\n\nget_weather_at_arrival()",
  "What is the expected pressure in Tokyo tomorrow?": "import requests\n\ndef get_pressure_forecast(location):\n    url = f\"http://api.weatherapi.com/v1/forecast.json?key=b4d5490d&days=2&q={location}\"\n    response = requests.get(url)\n    data = response.json()\n\n    try:\n        forecast_data = data['forecast']['forecastday'][1]['hour']\n        pressure_forecast = {}\n        for hour in forecast_data:\n            datetime = hour['time']\n            pressure = hour['pressure_mb']\n            pressure_forecast[datetime] = pressure\n        return pressure_forecast\n    except KeyError:\n        return f\"No forecast data available for {location}\"\n\nlocation = 'Tokyo, Japan'\n\npressure_forecast = get_pressure_forecast(location)\n\nfor datetime, pressure in pressure_forecast.items():\n    print(f\"At {datetime}, the expected pressure in {location} will be {pressure} mb.\")",
  "What will be the sunset time in Rome three days from now?": "import requests\n\napi_key = 'b4d5490d'\ncity = 'Rome, Italy'\n\n# Get the weather forecast for Rome\nresponse = requests.get(f'https://api.weatherapi.com/v1/forecast.json?key={api_key}&q={city}&days=3')\ndata = response.json()\n\n# Extract the sunset time for the third day\nsunset_time = data['forecast']['forecastday'][2]['astro']['sunset']\n\nprint(f\"The sunset time in Rome three days from now is {sunset_time}.\")",
  "What is the weather forecast for Paris, France, on the upcoming weekend? Is it a good time for outdoor activities?": "import requests\nfrom datetime import datetime, timedelta\n\ndef get_weekend_forecast(city):\n    api_key = 'b4d5490d'\n    base_url = \"http://api.weatherapi.com/v1/forecast.json?key={}&q={}&days=7\".format(api_key, city)\n\n    response = requests.get(base_url)\n    data = response.json()\n    forecast_data = data['forecast']['forecastday']\n\n    # Get the dates for the upcoming weekend\n    today = datetime.today()\n    saturday = today + timedelta((5 - today.weekday() + 7) % 7)\n    sunday = saturday + timedelta(days=1)\n\n    for day in forecast_data:\n        date = day['date']\n        # Convert the date to a datetime object for comparison\n        forecast_date = datetime.strptime(date, \"%Y-%m-%d\")\n        # If the forecast is for the upcoming weekend\n        if forecast_date.date() in [saturday.date(), sunday.date()]:\n            maxtemp = day['day']['maxtemp_c']\n            mintemp = day['day']['mintemp_c']\n            condition = day['day']['condition']['text']\n\n            print(\"Date: {}, Max Temp: {}°C, Min Temp: {}°C, Condition: {}\".format(date, maxtemp, mintemp, condition))\n\n            # Determining if it's a good time for outdoor activities\n            # Assume if the weather condition contains 'rain' or 'storm', it's not a good time for outdoor activities\n            if 'rain' in condition.lower() or 'storm' in condition.lower():\n                print(\"It might not be a good day for outdoor activities due to {}\".format(condition))\n            else:\n                print(\"It seems to be a good day for outdoor activities\")\n\nget_weekend_forecast(\"Paris, France\")",
  "Can I know the humidity levels in Tokyo today, and will it be uncomfortable for people sensitive to humidity?": "import requests\n\ndef get_humidity(api_key):\n    # Define API url\n    url = f\"https://api.weatherapi.com/v1/current.json?key={api_key}&q=Tokyo\"\n    \n    # Send GET request to the API\n    response = requests.get(url)\n    \n    # Check if the request was successful\n    if response.status_code != 200:\n        print(\"Error:\", response.status_code)\n        return\n    \n    # Parse the JSON response\n    data = response.json()\n    \n    # Extract the current humidity level\n    humidity = data[\"current\"][\"humidity\"]\n    \n    # Check if the humidity level is uncomfortable for sensitive people\n    if humidity > 60:\n        print(f\"The humidity level in Tokyo today is {humidity}%, which may be uncomfortable for people sensitive to humidity.\")\n    else:\n        print(f\"The humidity level in Tokyo today is {humidity}%, which should be comfortable for most people.\")\n\nget_humidity('b4d5490d')",
  "What will be the weather forecast for London, UK, on the fourth day from now?": "import requests\nimport json\nfrom datetime import datetime, timedelta\n\ndef get_weather_forecast():\n    # Define API url\n    url = \"http://api.weatherapi.com/v1/forecast.json\"\n    \n    # Define API parameters\n    params = {\n        'key': 'b4d5490d',  # weatherapi API key\n        'q': 'London, United Kingdom',  # location\n        'days': 4  # number of days for forecast\n    }\n    \n    # Send GET request to the API\n    response = requests.get(url, params=params)\n\n    # Check if request was successful\n    if response.status_code != 200:\n        print(\"Error:\", response.status_code)\n        return\n    \n    # Parse the JSON response\n    data = json.loads(response.text)\n\n    # Extract information for the fourth day forecast\n    forecast_date = datetime.now() + timedelta(days=4)\n    forecast_date_str = forecast_date.strftime(\"%Y-%m-%d\")\n    forecast_day = data['forecast']['forecastday'][3]\n    weather_condition = forecast_day['day']['condition']['text']\n    max_temp_C = forecast_day['day']['maxtemp_c']\n    min_temp_C = forecast_day['day']['mintemp_c']\n    total_precip_mm = forecast_day['day']['totalprecip_mm']\n    max_wind_kph = forecast_day['day']['maxwind_kph']\n    \n    # Print the results\n    print(f\"Weather forecast for London, UK on {forecast_date_str}:\")\n    print(f\"Weather condition: {weather_condition}\")\n    print(f\"Max temperature: {max_temp_C}°C\")\n    print(f\"Min temperature: {min_temp_C}°C\")\n    print(f\"Total precipitation: {total_precip_mm}mm\")\n    print(f\"Max wind speed: {max_wind_kph} kph\")\n\n# Execute the function\nget_weather_forecast()"
}